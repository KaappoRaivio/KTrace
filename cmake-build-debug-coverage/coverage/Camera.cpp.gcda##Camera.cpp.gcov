        -:    0:Source:/home/kaappo/git/raytracercpp/src/core/engine/Camera.cpp
        -:    0:Graph:/home/kaappo/git/raytracercpp/cmake-build-debug-coverage/CMakeFiles/Main.dir/src/core/engine/Camera.cpp.gcno
        -:    0:Data:/home/kaappo/git/raytracercpp/cmake-build-debug-coverage/CMakeFiles/Main.dir/src/core/engine/Camera.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by kaappo on 11.9.2021.
        -:    3://
        -:    4:
        -:    5:#include "Camera.h"
        -:    6:
        -:    7:#include <utility>
        -:    8:
function _ZN6CameraC2E9MyVector3St4pairIddEdS2_S1_IiiE called 2 returned 100% blocks executed 100%
        2:    9:Camera::Camera (MyVector3 origin, std::pair<double, double> rotation, double viewplane_distance, std::pair<double, double> viewplane_size, std::pair<int, int> viewport_size) : origin{origin}, rotation{std::move(rotation)}, viewplane_distance{viewplane_distance},
        -:   10:                                                                                                                                                                              viewplane_size{std::move(viewplane_size)}, viewport_size{std::move(viewport_size)},
        2:   11:                                                                                                                                                                              direction{Camera::DIRECTION_REFERENCE.rotate(rotation.first, rotation.second)} {}
        2:   11-block  0
call    0 returned 2
        -:   12:
function _ZNK6Camera13get_viewplaneEi called 1 returned 100% blocks executed 82%
        1:   13:std::vector<std::vector<MyVector3>> Camera::get_viewplane (const int antialiasingScaler) const {
        1:   14:    int viewport_size_x_with_antialiasing = viewport_size.first * antialiasingScaler;
        1:   15:    int viewport_size_y_with_antialiasing = viewport_size.second * antialiasingScaler;
        1:   15-block  0
call    0 returned 1
        -:   16:
        2:   17:    std::cout << "Generating viewplane with dimensions (" << viewport_size_x_with_antialiasing << ", " << viewport_size_y_with_antialiasing << ")!" << std::endl;
call    0 returned 1
call    1 returned 1
        -:   18:
        -:   19:
        1:   20:    auto viewport_to_viewplane_x = viewplane_size.first / viewport_size_x_with_antialiasing;
        1:   21:    auto viewport_to_viewplane_z = viewplane_size.second / viewport_size_y_with_antialiasing;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   22:
        -:   23:
        -:   24:    std::vector<std::vector<MyVector3>> viewplane_matrix;
        1:   25:    viewplane_matrix.reserve(viewport_size_y_with_antialiasing);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   26:
      201:   27:    for (int z = viewport_size_y_with_antialiasing; z > 0; --z) {
      201:   27-block  0
branch  0 taken 200 (fallthrough)
branch  1 taken 1
      200:   27-block  1
        -:   28:        std::vector<MyVector3> viewplane_matrix_row;
      200:   29:        viewplane_matrix_row.reserve(viewport_size_x_with_antialiasing);
      200:   29-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
        -:   30:
    40200:   31:        for (int x = 0; x < viewport_size_x_with_antialiasing; ++x) {
    40200:   31-block  0
branch  0 taken 40000 (fallthrough)
branch  1 taken 200
    80000:   32:            viewplane_matrix_row.push_back(MyVector3{viewport_to_viewplane_x * x - viewplane_size.first / 2, viewplane_distance, viewport_to_viewplane_z * z - viewplane_size.second / 2}.rotate(rotation.first, rotation.second).normalize());
    40000:   32-block  0
call    0 returned 40000
branch  1 taken 40000 (fallthrough)
branch  2 taken 0 (throw)
    40000:   32-block  1
call    3 returned 40000
branch  4 taken 40000 (fallthrough)
branch  5 taken 0 (throw)
    40000:   32-block  2
    $$$$$:   32-block  3
branch  6 never executed
branch  7 never executed
        -:   33:        }
      200:   34:        viewplane_matrix.push_back(viewplane_matrix_row);
      200:   34-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
        -:   35:    }
        -:   36:
        1:   37:    return viewplane_matrix;
        1:   37-block  0
        -:   38:}
        -:   39:
function _ZNK6Camera9getOriginEv called 40000 returned 100% blocks executed 100%
    40000:   40:const MyVector3& Camera::getOrigin () const {
    40000:   41:    return origin;
        -:   42:}
        -:   43:
function _ZlsRSoRK6Camera called 0 returned 0% blocks executed 0%
    #####:   44:std::ostream& operator<< (std::ostream& os, const Camera& camera) {
    %%%%%:   44-block  0
call    0 never executed
    #####:   45:    return os << "Camera";
        -:   46:}
        -:   47:
function _ZN6Camera20setViewplaneDistanceEd called 0 returned 0% blocks executed 0%
    #####:   48:void Camera::setViewplaneDistance (double viewplaneDistance) {
    #####:   49:    this->viewplane_distance = viewplaneDistance;
    #####:   50:}
        -:   51:
function _ZNK6Camera20getViewplaneDistanceEv called 0 returned 0% blocks executed 0%
    #####:   52:double Camera::getViewplaneDistance () const {
    #####:   53:    return viewplane_distance;
        -:   54:}
        -:   55:
function _ZN6Camera4moveERK9MyVector3 called 1 returned 100% blocks executed 100%
        1:   56:void Camera::move (const MyVector3& direction) {
        1:   57:    origin = origin + direction;
        1:   57-block  0
call    0 returned 1
        1:   58:}

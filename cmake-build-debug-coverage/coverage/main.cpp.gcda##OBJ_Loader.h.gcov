        -:    0:Source:/home/kaappo/git/raytracercpp/lib/obj-loader/OBJ_Loader.h
        -:    0:Graph:/home/kaappo/git/raytracercpp/cmake-build-debug-coverage/CMakeFiles/Main.dir/main.cpp.gcno
        -:    0:Data:/home/kaappo/git/raytracercpp/cmake-build-debug-coverage/CMakeFiles/Main.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    1:
        -:    2:
        -:    3:#pragma once
        -:    4:
        -:    5:#include <iostream>
        -:    6:#include <vector>
        -:    7:#include <string>
        -:    8:#include <fstream>
        -:    9:#include <math.h>
        -:   10:
        -:   11:#define OBJL_CONSOLE_OUTPUT
        -:   12:
        -:   13:namespace objl {
        -:   14:    struct Vector2 {
    2256*:   15:        Vector2 () {
    2256*:   16:            X = 0.0f;
    2256*:   17:            Y = 0.0f;
        -:   18:        }
        -:   19:
        -:   20:        Vector2 (float X_, float Y_) {
        -:   21:            X = X_;
        -:   22:            Y = Y_;
        -:   23:        }
        -:   24:
        -:   25:        bool operator== (const Vector2& other) const {
        -:   26:            return (this->X == other.X && this->Y == other.Y);
        -:   27:        }
        -:   28:
        -:   29:        bool operator!= (const Vector2& other) const {
        -:   30:            return !(this->X == other.X && this->Y == other.Y);
        -:   31:        }
        -:   32:
        -:   33:        Vector2 operator+ (const Vector2& right) const {
        -:   34:            return Vector2(this->X + right.X, this->Y + right.Y);
        -:   35:        }
        -:   36:
        -:   37:        Vector2 operator- (const Vector2& right) const {
        -:   38:            return Vector2(this->X - right.X, this->Y - right.Y);
        -:   39:        }
        -:   40:
        -:   41:        Vector2 operator* (const float& other) const {
        -:   42:            return Vector2(this->X * other, this->Y * other);
        -:   43:        }
        -:   44:
        -:   45:
        -:   46:        float X;
        -:   47:        float Y;
        -:   48:    };
        -:   49:
        -:   50:
        -:   51:    struct Vector3 {
        -:   52:
    4662*:   53:        Vector3 () {
     4662:   54:            X = 0.0f;
     4662:   55:            Y = 0.0f;
     4662:   56:            Z = 0.0f;
        -:   57:        }
        -:   58:
        -:   59:        Vector3 (float X_, float Y_, float Z_) {
        -:   60:            X = X_;
        -:   61:            Y = Y_;
        -:   62:            Z = Z_;
        -:   63:        }
        -:   64:
        -:   65:        bool operator== (const Vector3& other) const {
    #####:   66:            return (this->X == other.X && this->Y == other.Y && this->Z == other.Z);
    %%%%%:   66-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   66-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:   66-block  2
branch  4 never executed
branch  5 never executed
    %%%%%:   66-block  3
branch  6 never executed
branch  7 never executed
    %%%%%:   66-block  4
branch  8 never executed
branch  9 never executed
    %%%%%:   66-block  5
branch 10 never executed
branch 11 never executed
    %%%%%:   66-block  6
branch 12 never executed
branch 13 never executed
    %%%%%:   66-block  7
branch 14 never executed
branch 15 never executed
    %%%%%:   66-block  8
branch 16 never executed
branch 17 never executed
    %%%%%:   66-block  9
branch 18 never executed
branch 19 never executed
    %%%%%:   66-block 10
branch 20 never executed
branch 21 never executed
    %%%%%:   66-block 11
branch 22 never executed
branch 23 never executed
    %%%%%:   66-block 12
branch 24 never executed
branch 25 never executed
    %%%%%:   66-block 13
branch 26 never executed
branch 27 never executed
    %%%%%:   66-block 14
branch 28 never executed
branch 29 never executed
    %%%%%:   66-block 15
branch 30 never executed
branch 31 never executed
    %%%%%:   66-block 16
branch 32 never executed
branch 33 never executed
    %%%%%:   66-block 17
branch 34 never executed
branch 35 never executed
    %%%%%:   66-block 18
branch 36 never executed
branch 37 never executed
    %%%%%:   66-block 19
branch 38 never executed
branch 39 never executed
    %%%%%:   66-block 20
branch 40 never executed
branch 41 never executed
    %%%%%:   66-block 21
branch 42 never executed
branch 43 never executed
    %%%%%:   66-block 22
branch 44 never executed
branch 45 never executed
    %%%%%:   66-block 23
branch 46 never executed
branch 47 never executed
    %%%%%:   66-block 24
branch 48 never executed
branch 49 never executed
    %%%%%:   66-block 25
branch 50 never executed
branch 51 never executed
    %%%%%:   66-block 26
branch 52 never executed
branch 53 never executed
    %%%%%:   66-block 27
branch 54 never executed
branch 55 never executed
    %%%%%:   66-block 28
branch 56 never executed
branch 57 never executed
    %%%%%:   66-block 29
branch 58 never executed
branch 59 never executed
    %%%%%:   66-block 30
branch 60 never executed
branch 61 never executed
    %%%%%:   66-block 31
branch 62 never executed
branch 63 never executed
    %%%%%:   66-block 32
branch 64 never executed
branch 65 never executed
    %%%%%:   66-block 33
branch 66 never executed
branch 67 never executed
    %%%%%:   66-block 34
branch 68 never executed
branch 69 never executed
    %%%%%:   66-block 35
branch 70 never executed
branch 71 never executed
    %%%%%:   66-block 36
branch 72 never executed
branch 73 never executed
    %%%%%:   66-block 37
branch 74 never executed
branch 75 never executed
    %%%%%:   66-block 38
branch 76 never executed
branch 77 never executed
        -:   67:        }
        -:   68:
        -:   69:        bool operator!= (const Vector3& other) const {
    #####:   70:            return !(this->X == other.X && this->Y == other.Y && this->Z == other.Z);
    %%%%%:   70-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   70-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:   70-block  2
branch  4 never executed
branch  5 never executed
    %%%%%:   70-block  3
branch  6 never executed
branch  7 never executed
    %%%%%:   70-block  4
branch  8 never executed
branch  9 never executed
    %%%%%:   70-block  5
branch 10 never executed
branch 11 never executed
    %%%%%:   70-block  6
branch 12 never executed
branch 13 never executed
    %%%%%:   70-block  7
branch 14 never executed
branch 15 never executed
    %%%%%:   70-block  8
branch 16 never executed
branch 17 never executed
    %%%%%:   70-block  9
branch 18 never executed
branch 19 never executed
    %%%%%:   70-block 10
branch 20 never executed
branch 21 never executed
    %%%%%:   70-block 11
branch 22 never executed
branch 23 never executed
    %%%%%:   70-block 12
branch 24 never executed
branch 25 never executed
    %%%%%:   70-block 13
branch 26 never executed
branch 27 never executed
    %%%%%:   70-block 14
branch 28 never executed
branch 29 never executed
    %%%%%:   70-block 15
branch 30 never executed
branch 31 never executed
    %%%%%:   70-block 16
branch 32 never executed
branch 33 never executed
    %%%%%:   70-block 17
branch 34 never executed
branch 35 never executed
        -:   71:        }
        -:   72:
        -:   73:        Vector3 operator+ (const Vector3& right) const {
        -:   74:            return Vector3(this->X + right.X, this->Y + right.Y, this->Z + right.Z);
        -:   75:        }
        -:   76:
        -:   77:        Vector3 operator- (const Vector3& right) const {
    #####:   78:            return Vector3(this->X - right.X, this->Y - right.Y, this->Z - right.Z);
        -:   79:        }
        -:   80:
        -:   81:        Vector3 operator* (const float& other) const {
    #####:   82:            return Vector3(this->X * other, this->Y * other, this->Z * other);
        -:   83:        }
        -:   84:
        -:   85:        Vector3 operator/ (const float& other) const {
    #####:   86:            return Vector3(this->X / other, this->Y / other, this->Z / other);
        -:   87:        }
        -:   88:
        -:   89:
        -:   90:        float X;
        -:   91:        float Y;
        -:   92:        float Z;
        -:   93:    };
        -:   94:
        -:   95:
        -:   96:    struct Vertex {
        -:   97:        Vector3 Position;
        -:   98:        Vector3 Normal;
        -:   99:        Vector2 TextureCoordinate;
        -:  100:    };
        -:  101:
        -:  102:    struct Material {
function _ZN4objl8MaterialC2Ev called 2 returned 100% blocks executed 100%
        2:  103:        Material () {
        -:  104:            name;
        2:  105:            Ns = 0.0f;
        2:  106:            Ni = 0.0f;
        2:  107:            d = 0.0f;
        2:  108:            illum = 0;
        2:  109:        }
        -:  110:
        -:  111:
        -:  112:        std::string name;
        -:  113:
        -:  114:        Vector3 Ka;
        -:  115:
        -:  116:        Vector3 Kd;
        -:  117:
        -:  118:        Vector3 Ks;
        -:  119:
        -:  120:        float Ns;
        -:  121:
        -:  122:        float Ni;
        -:  123:
        -:  124:        float d;
        -:  125:
        -:  126:        int illum;
        -:  127:
        -:  128:        std::string map_Ka;
        -:  129:
        -:  130:        std::string map_Kd;
        -:  131:
        -:  132:        std::string map_Ks;
        -:  133:
        -:  134:        std::string map_Ns;
        -:  135:
        -:  136:        std::string map_d;
        -:  137:
        -:  138:        std::string map_bump;
        -:  139:    };
        -:  140:
        -:  141:
        -:  142:    struct Mesh {
        -:  143:
        1:  144:        Mesh () {
        1:  144-block  0
call    0 returned 1
        -:  145:
        -:  146:        }
        -:  147:
function _ZN4objl4MeshC2ERSt6vectorINS_6VertexESaIS2_EERS1_IjSaIjEE called 1 returned 100% blocks executed 28%
        1:  148:        Mesh (std::vector<Vertex>& _Vertices, std::vector<unsigned int>& _Indices) {
        1:  148-block  0
call    0 returned 1
    $$$$$:  148-block  1
call    1 never executed
        1:  149:            Vertices = _Vertices;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  150:            Indices = _Indices;
        1:  150-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  151:        }
        1:  151-block  0
        -:  152:
        -:  153:        std::string MeshName;
        -:  154:
        -:  155:        std::vector<Vertex> Vertices;
        -:  156:
        -:  157:        std::vector<unsigned int> Indices;
        -:  158:
        -:  159:
        -:  160:        Material MeshMaterial;
        -:  161:    };
        -:  162:
        -:  163:
        -:  164:    namespace math {
        -:  165:
function _ZN4objl4math7CrossV3ENS_7Vector3ES1_ called 0 returned 0% blocks executed 0%
    #####:  166:        Vector3 CrossV3 (const Vector3 a, const Vector3 b) {
    #####:  167:            return Vector3(a.Y * b.Z - a.Z * b.Y,
    #####:  168:                           a.Z * b.X - a.X * b.Z,
    #####:  169:                           a.X * b.Y - a.Y * b.X);
    %%%%%:  169-block  0
        -:  170:        }
        -:  171:
        -:  172:
function _ZN4objl4math11MagnitudeV3ENS_7Vector3E called 0 returned 0% blocks executed 0%
    #####:  173:        float MagnitudeV3 (const Vector3 in) {
    #####:  174:            return (sqrtf(powf(in.X, 2) + powf(in.Y, 2) + powf(in.Z, 2)));
        -:  175:        }
        -:  176:
        -:  177:
function _ZN4objl4math5DotV3ENS_7Vector3ES1_ called 0 returned 0% blocks executed 0%
    #####:  178:        float DotV3 (const Vector3 a, const Vector3 b) {
    #####:  179:            return (a.X * b.X) + (a.Y * b.Y) + (a.Z * b.Z);
        -:  180:        }
        -:  181:
        -:  182:
function _ZN4objl4math14AngleBetweenV3ENS_7Vector3ES1_ called 0 returned 0% blocks executed 0%
    #####:  183:        float AngleBetweenV3 (const Vector3 a, const Vector3 b) {
        -:  184:            float angle = DotV3(a, b);
    #####:  185:            angle /= (MagnitudeV3(a) * MagnitudeV3(b));
    %%%%%:  185-block  0
call    0 never executed
call    1 never executed
    #####:  186:            return angle = acosf(angle);
        -:  187:        }
        -:  188:
        -:  189:
function _ZN4objl4math6ProjV3ENS_7Vector3ES1_ called 0 returned 0% blocks executed 0%
    #####:  190:        Vector3 ProjV3 (const Vector3 a, const Vector3 b) {
    #####:  191:            Vector3 bn = b / MagnitudeV3(b);
    %%%%%:  191-block  0
call    0 never executed
    #####:  192:            return bn * DotV3(a, bn);
        -:  193:        }
        -:  194:    }
        -:  195:
        -:  196:
        -:  197:    namespace algorithm {
        -:  198:
function _ZN4objl9algorithmmlERKfRKNS_7Vector3E called 0 returned 0% blocks executed 0%
    #####:  199:        Vector3 operator* (const float& left, const Vector3& right) {
    #####:  200:            return Vector3(right.X * left, right.Y * left, right.Z * left);
        -:  201:        }
        -:  202:
        -:  203:
function _ZN4objl9algorithm8SameSideENS_7Vector3ES1_S1_S1_ called 0 returned 0% blocks executed 0%
    #####:  204:        bool SameSide (Vector3 p1, Vector3 p2, Vector3 a, Vector3 b) {
        -:  205:            Vector3 cp1 = math::CrossV3(b - a, p1 - a);
        -:  206:            Vector3 cp2 = math::CrossV3(b - a, p2 - a);
        -:  207:
    #####:  208:            if (math::DotV3(cp1, cp2) >= 0)
    %%%%%:  208-block  0
branch  0 never executed
branch  1 never executed
        -:  209:                return true;
        -:  210:            else
    #####:  211:                return false;
    %%%%%:  211-block  0
        -:  212:        }
        -:  213:
        -:  214:
function _ZN4objl9algorithm12GenTriNormalENS_7Vector3ES1_S1_ called 0 returned 0% blocks executed 0%
    #####:  215:        Vector3 GenTriNormal (Vector3 t1, Vector3 t2, Vector3 t3) {
        -:  216:            Vector3 u = t2 - t1;
        -:  217:            Vector3 v = t3 - t1;
        -:  218:
        -:  219:            Vector3 normal = math::CrossV3(u, v);
        -:  220:
    #####:  221:            return normal;
        -:  222:        }
        -:  223:
        -:  224:
function _ZN4objl9algorithm10inTriangleENS_7Vector3ES1_S1_S1_ called 0 returned 0% blocks executed 0%
    #####:  225:        bool inTriangle (Vector3 point, Vector3 tri1, Vector3 tri2, Vector3 tri3) {
        -:  226:
    #####:  227:            bool within_tri_prisim = SameSide(point, tri1, tri2, tri3) && SameSide(point, tri2, tri1, tri3)
    %%%%%:  227-block  0
branch  0 never executed
branch  1 never executed
    #####:  228:                                     && SameSide(point, tri3, tri1, tri2);
    %%%%%:  228-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  228-block  1
branch  2 never executed
branch  3 never executed
        -:  229:
        -:  230:
        -:  231:            if (!within_tri_prisim)
        -:  232:                return false;
        -:  233:
        -:  234:
        -:  235:            Vector3 n = GenTriNormal(tri1, tri2, tri3);
        -:  236:
        -:  237:
    #####:  238:            Vector3 proj = math::ProjV3(point, n);
    %%%%%:  238-block  0
call    0 never executed
        -:  239:
        -:  240:
    #####:  241:            if (math::MagnitudeV3(proj) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  242:                return true;
        -:  243:            else
    #####:  244:                return false;
    %%%%%:  244-block  0
        -:  245:        }
        -:  246:
        -:  247:
function _ZN4objl9algorithm5splitERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERSt6vectorIS6_SaIS6_EES6_ called 11428 returned 100% blocks executed 54%
    11428:  248:        inline void split (const std::string& in,
    11428:  248-block  0
branch  0 taken 4512 (fallthrough)
branch  1 taken 6916
        -:  249:                           std::vector<std::string>& out,
        -:  250:                           std::string token) {
        -:  251:            out.clear();
        -:  252:
        -:  253:            std::string temp;
        -:  254:
   180114:  255:            for (int i = 0; i < int(in.size()); i++) {
   180114:  255-block  0
branch  0 taken 180114 (fallthrough)
branch  1 taken 0
   168686:  255-block  1
   180114:  256:                std::string test = in.substr(i, token.size());
   180114:  256-block  0
call    0 returned 180114
branch  1 taken 180114 (fallthrough)
branch  2 taken 0 (throw)
        -:  257:
   180114:  258:                if (test == token) {
   180114:  258-block  0
branch  0 taken 22856 (fallthrough)
branch  1 taken 157258
    22856:  259:                    if (!temp.empty()) {
    22856:  259-block  0
branch  0 taken 16088 (fallthrough)
branch  1 taken 6768
    16088:  260:                        out.push_back(temp);
    16088:  260-block  0
call    0 returned 16088
branch  1 taken 16088 (fallthrough)
branch  2 taken 0 (throw)
        -:  261:                        temp.clear();
    16088:  262:                        i += (int) token.size() - 1;
    16088:  262-block  0
        -:  263:                    } else {
    13536:  264:                        out.push_back("");
     6768:  264-block  0
call    0 returned 6768
branch  1 taken 6768 (fallthrough)
branch  2 taken 0 (throw)
     6768:  264-block  1
        -:  265:                    }
   157258:  266:                } else if (i + token.size() >= in.size()) {
   157258:  266-block  0
branch  0 taken 11428 (fallthrough)
branch  1 taken 145830
    11428:  267:                    temp += in.substr(i, token.size());
    11428:  267-block  0
call    0 returned 11428
branch  1 taken 11428 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:  267-block  1
branch  3 never executed
branch  4 never executed
    11428:  268:                    out.push_back(temp);
    11428:  268-block  0
call    0 returned 11428
branch  1 taken 11428 (fallthrough)
branch  2 taken 0 (throw)
        -:  269:                    break;
        -:  270:                } else {
   145830:  271:                    temp += in[i];
   145830:  271-block  0
call    0 returned 145830
branch  1 taken 145830 (fallthrough)
branch  2 taken 0 (throw)
        -:  272:                }
        -:  273:            }
    11428:  274:        }
    11428:  274-block  0
        -:  275:
        -:  276:
function _ZN4objl9algorithm4tailERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 4660 returned 100% blocks executed 43%
     4660:  277:        inline std::string tail (const std::string& in) {
     4660:  277-block  0
branch  0 taken 4660 (fallthrough)
branch  1 taken 0
        -:  278:            size_t token_start = in.find_first_not_of(" \t");
        -:  279:            size_t space_start = in.find_first_of(" \t", token_start);
        -:  280:            size_t tail_start = in.find_first_not_of(" \t", space_start);
        -:  281:            size_t tail_end = in.find_last_not_of(" \t");
     4660:  282:            if (tail_start != std::string::npos && tail_end != std::string::npos) {
     4660:  282-block  0
branch  0 taken 4660 (fallthrough)
branch  1 taken 0
     4660:  283:                return in.substr(tail_start, tail_end - tail_start + 1);
     4660:  283-block  0
call    0 returned 4660
    #####:  284:            } else if (tail_start != std::string::npos) {
    %%%%%:  284-block  0
branch  0 never executed
branch  1 never executed
    #####:  285:                return in.substr(tail_start);
    %%%%%:  285-block  0
call    0 never executed
        -:  286:            }
    #####:  287:            return "";
    %%%%%:  287-block  0
call    0 never executed
        -:  288:        }
        -:  289:
        -:  290:
function _ZN4objl9algorithm10firstTokenERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 37304 returned 100% blocks executed 50%
    37304:  291:        inline std::string firstToken (const std::string& in) {
    37304:  291-block  0
branch  0 taken 37304 (fallthrough)
branch  1 taken 0
    37304:  292:            if (!in.empty()) {
    37304:  292-block  0
branch  0 taken 37304 (fallthrough)
branch  1 taken 0
        -:  293:                size_t token_start = in.find_first_not_of(" \t");
        -:  294:                size_t token_end = in.find_first_of(" \t", token_start);
    37304:  295:                if (token_start != std::string::npos && token_end != std::string::npos) {
    37304:  295-block  0
branch  0 taken 37304 (fallthrough)
branch  1 taken 0
    37304:  296:                    return in.substr(token_start, token_end - token_start);
    37304:  296-block  0
call    0 returned 37304
    #####:  297:                } else if (token_start != std::string::npos) {
    %%%%%:  297-block  0
branch  0 never executed
branch  1 never executed
    #####:  298:                    return in.substr(token_start);
    %%%%%:  298-block  0
call    0 never executed
        -:  299:                }
        -:  300:            }
    #####:  301:            return "";
    %%%%%:  301-block  0
call    0 never executed
        -:  302:        }
        -:  303:
        -:  304:
        -:  305:        template<class T>
   13536*:  306:        inline const T& getElement (const std::vector<T>& elements, std::string& index) {
        -:  307:            int idx = std::stoi(index);
   13536*:  308:            if (idx < 0)
    #####:  309:                idx = int(elements.size()) + idx;
        -:  310:            else
   13536*:  311:                idx--;
   13536*:  312:            return elements[idx];
        -:  313:        }
------------------
_ZN4objl9algorithm10getElementINS_7Vector2EEERKT_RKSt6vectorIS3_SaIS3_EERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN4objl9algorithm10getElementINS_7Vector2EEERKT_RKSt6vectorIS3_SaIS3_EERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  306:        inline const T& getElement (const std::vector<T>& elements, std::string& index) {
    %%%%%:  306-block  0
call    0 never executed
        -:  307:            int idx = std::stoi(index);
    #####:  308:            if (idx < 0)
branch  0 never executed
branch  1 never executed
    #####:  309:                idx = int(elements.size()) + idx;
    %%%%%:  309-block  0
        -:  310:            else
    #####:  311:                idx--;
    %%%%%:  311-block  0
    #####:  312:            return elements[idx];
        -:  313:        }
------------------
_ZN4objl9algorithm10getElementINS_7Vector3EEERKT_RKSt6vectorIS3_SaIS3_EERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN4objl9algorithm10getElementINS_7Vector3EEERKT_RKSt6vectorIS3_SaIS3_EERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 13536 returned 100% blocks executed 80%
    13536:  306:        inline const T& getElement (const std::vector<T>& elements, std::string& index) {
    13536:  306-block  0
call    0 returned 13536
        -:  307:            int idx = std::stoi(index);
    13536:  308:            if (idx < 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 13536
    #####:  309:                idx = int(elements.size()) + idx;
    %%%%%:  309-block  0
        -:  310:            else
    13536:  311:                idx--;
    13536:  311-block  0
    13536:  312:            return elements[idx];
        -:  313:        }
------------------
        -:  314:    }
        -:  315:
        -:  316:
        -:  317:    class Loader {
        -:  318:    public:
        -:  319:
        -:  320:        Loader () {
        -:  321:
        -:  322:        }
        -:  323:
function _ZN4objl6LoaderD2Ev called 1 returned 100% blocks executed 100%
        2:  324:        ~Loader () {
        1:  324-block  0
call    0 returned 1
        1:  324-block  1
call    1 returned 1
        1:  325:            LoadedMeshes.clear();
        1:  325-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  326:        }
        -:  327:
        -:  328:
function _ZN4objl6Loader8LoadFileENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 27%
        1:  329:        bool LoadFile (std::string Path) {
        1:  329-block  0
call    0 returned 1
        -:  330:
        2:  331:            if (Path.substr(Path.size() - 4, 4) != ".obj")
        1:  331-block  0
call    0 returned 1
        1:  331-block  1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        -:  332:                return false;
        -:  333:
        -:  334:
        2:  335:            std::ifstream file(Path);
        1:  335-block  0
call    0 returned 1
        1:  335-block  1
call    1 returned 1
    $$$$$:  335-block  2
call    2 never executed
        -:  336:
        1:  337:            if (!file.is_open())
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:  338:                return false;
        -:  339:
        1:  340:            LoadedMeshes.clear();
        1:  340-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:  341:            LoadedVertices.clear();
        1:  341-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:  342:            LoadedIndices.clear();
        1:  342-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  343:
        -:  344:            std::vector<Vector3> Positions;
        -:  345:            std::vector<Vector2> TCoords;
        -:  346:            std::vector<Vector3> Normals;
        -:  347:
        -:  348:            std::vector<Vertex> Vertices;
        -:  349:            std::vector<unsigned int> Indices;
        -:  350:
        1:  351:            std::vector<std::string> MeshMatNames;
        1:  351-block  0
call    0 returned 1
    $$$$$:  351-block  1
call    1 never executed
        -:  352:
        -:  353:            bool listening = false;
        -:  354:            std::string meshname;
        -:  355:
        1:  356:            Mesh tempMesh;
        1:  356-block  0
call    0 returned 1
    $$$$$:  356-block  1
call    1 never executed
        -:  357:
        -:  358:#ifdef OBJL_CONSOLE_OUTPUT
        -:  359:            const unsigned int outputEveryNth = 1000;
        -:  360:            unsigned int outputIndicator = outputEveryNth;
        -:  361:#endif
        -:  362:
        -:  363:            std::string curline;
     4664:  364:            while (std::getline(file, curline)) {
     4664:  364-block  0
call    0 returned 4664
branch  1 taken 4664 (fallthrough)
branch  2 taken 0 (throw)
     4664:  364-block  1
branch  3 taken 4663 (fallthrough)
branch  4 taken 1
        -:  365:#ifdef OBJL_CONSOLE_OUTPUT
     4663:  366:                if ((outputIndicator = ((outputIndicator + 1) % outputEveryNth)) == 1) {
     4663:  366-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 4658
        5:  367:                    if (!meshname.empty()) {
        5:  367-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        -:  368:                        std::cout
        -:  369:                                << "\r- " << meshname
        -:  370:                                << "\t| vertices > " << Positions.size()
        -:  371:                                << "\t| texcoords > " << TCoords.size()
        -:  372:                                << "\t| normals > " << Normals.size()
    #####:  373:                                << "\t| triangles > " << (Vertices.size() / 3)
    %%%%%:  373-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  374:                                << (!MeshMatNames.empty() ? "\t| material: " + MeshMatNames.back() : "");
    %%%%%:  374-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  374-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  374-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  374-block  3
        -:  375:                    }
        -:  376:                }
        -:  377:#endif
        -:  378:
        -:  379:
    9326*:  380:                if (algorithm::firstToken(curline) == "o" || algorithm::firstToken(curline) == "g" || curline[0] == 'g') {
     4663:  380-block  0
call    0 returned 4663
branch  1 taken 4663 (fallthrough)
branch  2 taken 0 (throw)
     4663:  380-block  1
branch  3 taken 4663 (fallthrough)
branch  4 taken 0
     4663:  380-block  2
call    5 returned 4663
branch  6 taken 4663 (fallthrough)
branch  7 taken 0 (throw)
     4663:  380-block  3
branch  8 taken 4663 (fallthrough)
branch  9 taken 0
     4663:  380-block  4
branch 10 taken 0 (fallthrough)
branch 11 taken 4663
    %%%%%:  380-block  5
branch 12 never executed
branch 13 never executed
     4663:  380-block  6
branch 14 taken 0 (fallthrough)
branch 15 taken 4663
     4663:  380-block  7
branch 16 taken 0 (fallthrough)
branch 17 taken 4663
    $$$$$:  380-block  8
branch 18 never executed
branch 19 never executed
    #####:  381:                    if (!listening) {
    %%%%%:  381-block  0
branch  0 never executed
branch  1 never executed
        -:  382:                        listening = true;
        -:  383:
    #####:  384:                        if (algorithm::firstToken(curline) == "o" || algorithm::firstToken(curline) == "g") {
    %%%%%:  384-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  384-block  1
branch  3 never executed
branch  4 never executed
    %%%%%:  384-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  384-block  3
branch  8 never executed
branch  9 never executed
    %%%%%:  384-block  4
branch 10 never executed
branch 11 never executed
    %%%%%:  384-block  5
branch 12 never executed
branch 13 never executed
    %%%%%:  384-block  6
branch 14 never executed
branch 15 never executed
    $$$$$:  384-block  7
branch 16 never executed
branch 17 never executed
    #####:  385:                            meshname = algorithm::tail(curline);
    %%%%%:  385-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  385-block  1
call    3 never executed
    %%%%%:  385-block  2
        -:  386:                        } else {
        -:  387:                            meshname = "unnamed";
        -:  388:                        }
        -:  389:                    } else {
        -:  390:
        -:  391:
    #####:  392:                        if (!Indices.empty() && !Vertices.empty()) {
    %%%%%:  392-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  392-block  1
branch  2 never executed
branch  3 never executed
        -:  393:
    #####:  394:                            tempMesh = Mesh(Vertices, Indices);
    %%%%%:  394-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  394-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -:  395:                            tempMesh.MeshName = meshname;
        -:  396:
        -:  397:
    #####:  398:                            LoadedMeshes.push_back(tempMesh);
    %%%%%:  398-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  399:
        -:  400:
        -:  401:                            Vertices.clear();
        -:  402:                            Indices.clear();
        -:  403:                            meshname.clear();
        -:  404:
    #####:  405:                            meshname = algorithm::tail(curline);
    %%%%%:  405-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  405-block  1
call    3 never executed
    %%%%%:  405-block  2
        -:  406:                        } else {
    #####:  407:                            if (algorithm::firstToken(curline) == "o" || algorithm::firstToken(curline) == "g") {
    %%%%%:  407-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  407-block  1
branch  3 never executed
branch  4 never executed
    %%%%%:  407-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  407-block  3
branch  8 never executed
branch  9 never executed
    %%%%%:  407-block  4
branch 10 never executed
branch 11 never executed
    %%%%%:  407-block  5
branch 12 never executed
branch 13 never executed
    %%%%%:  407-block  6
branch 14 never executed
branch 15 never executed
    $$$$$:  407-block  7
branch 16 never executed
branch 17 never executed
    #####:  408:                                meshname = algorithm::tail(curline);
    %%%%%:  408-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  408-block  1
call    3 never executed
    %%%%%:  408-block  2
        -:  409:                            } else {
        -:  410:                                meshname = "unnamed";
        -:  411:                            }
        -:  412:                        }
        -:  413:                    }
        -:  414:#ifdef OBJL_CONSOLE_OUTPUT
        -:  415:                    std::cout << std::endl;
        -:  416:                    outputIndicator = 0;
        -:  417:#endif
        -:  418:                }
        -:  419:
     9326:  420:                if (algorithm::firstToken(curline) == "v") {
     4663:  420-block  0
call    0 returned 4663
branch  1 taken 4663 (fallthrough)
branch  2 taken 0 (throw)
     4663:  420-block  1
branch  3 taken 1202 (fallthrough)
branch  4 taken 3461
     1202:  421:                    std::vector<std::string> spos;
     1202:  421-block  0
call    0 returned 1202
        -:  422:                    Vector3 vpos;
     2404:  423:                    algorithm::split(algorithm::tail(curline), spos, " ");
     1202:  423-block  0
call    0 returned 1202
branch  1 taken 1202 (fallthrough)
branch  2 taken 0 (throw)
     1202:  423-block  1
call    3 returned 1202
branch  4 taken 1202 (fallthrough)
branch  5 taken 0 (throw)
     1202:  423-block  2
call    6 returned 1202
branch  7 taken 1202 (fallthrough)
branch  8 taken 0 (throw)
     1202:  423-block  3
branch  9 taken 0 (fallthrough)
branch 10 taken 1202
     1202:  423-block  4
call   11 returned 1202
branch 12 taken 1202 (fallthrough)
branch 13 taken 0 (throw)
    $$$$$:  423-block  5
branch 14 never executed
branch 15 never executed
    $$$$$:  423-block  6
call   16 never executed
        -:  424:
     1202:  425:                    vpos.X = std::stof(spos[0]);
     1202:  425-block  0
call    0 returned 1202
branch  1 taken 1202 (fallthrough)
branch  2 taken 0 (throw)
     1202:  426:                    vpos.Y = std::stof(spos[1]);
     1202:  426-block  0
call    0 returned 1202
branch  1 taken 1202 (fallthrough)
branch  2 taken 0 (throw)
     1202:  427:                    vpos.Z = std::stof(spos[2]);
        -:  428:
     1202:  429:                    Positions.push_back(vpos);
     1202:  429-block  0
call    0 returned 1202
branch  1 taken 1202 (fallthrough)
branch  2 taken 0 (throw)
        -:  430:                }
        -:  431:
     9326:  432:                if (algorithm::firstToken(curline) == "vt") {
     4663:  432-block  0
call    0 returned 4663
branch  1 taken 4663 (fallthrough)
branch  2 taken 0 (throw)
     4663:  432-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 4663
    #####:  433:                    std::vector<std::string> stex;
    %%%%%:  433-block  0
call    0 never executed
        -:  434:                    Vector2 vtex;
    #####:  435:                    algorithm::split(algorithm::tail(curline), stex, " ");
    %%%%%:  435-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  435-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  435-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  435-block  3
branch  9 never executed
branch 10 never executed
    %%%%%:  435-block  4
call   11 never executed
branch 12 never executed
branch 13 never executed
    $$$$$:  435-block  5
branch 14 never executed
branch 15 never executed
    $$$$$:  435-block  6
call   16 never executed
        -:  436:
    #####:  437:                    vtex.X = std::stof(stex[0]);
    %%%%%:  437-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  438:                    vtex.Y = std::stof(stex[1]);
        -:  439:
    #####:  440:                    TCoords.push_back(vtex);
    %%%%%:  440-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  441:                }
        -:  442:
     9326:  443:                if (algorithm::firstToken(curline) == "vn") {
     4663:  443-block  0
call    0 returned 4663
branch  1 taken 4663 (fallthrough)
branch  2 taken 0 (throw)
     4663:  443-block  1
branch  3 taken 1202 (fallthrough)
branch  4 taken 3461
     1202:  444:                    std::vector<std::string> snor;
     1202:  444-block  0
call    0 returned 1202
        -:  445:                    Vector3 vnor;
     2404:  446:                    algorithm::split(algorithm::tail(curline), snor, " ");
     1202:  446-block  0
call    0 returned 1202
branch  1 taken 1202 (fallthrough)
branch  2 taken 0 (throw)
     1202:  446-block  1
call    3 returned 1202
branch  4 taken 1202 (fallthrough)
branch  5 taken 0 (throw)
     1202:  446-block  2
call    6 returned 1202
branch  7 taken 1202 (fallthrough)
branch  8 taken 0 (throw)
     1202:  446-block  3
branch  9 taken 0 (fallthrough)
branch 10 taken 1202
     1202:  446-block  4
call   11 returned 1202
branch 12 taken 1202 (fallthrough)
branch 13 taken 0 (throw)
    $$$$$:  446-block  5
branch 14 never executed
branch 15 never executed
    $$$$$:  446-block  6
call   16 never executed
        -:  447:
     1202:  448:                    vnor.X = std::stof(snor[0]);
     1202:  448-block  0
call    0 returned 1202
branch  1 taken 1202 (fallthrough)
branch  2 taken 0 (throw)
     1202:  449:                    vnor.Y = std::stof(snor[1]);
     1202:  449-block  0
call    0 returned 1202
branch  1 taken 1202 (fallthrough)
branch  2 taken 0 (throw)
     1202:  450:                    vnor.Z = std::stof(snor[2]);
        -:  451:
     1202:  452:                    Normals.push_back(vnor);
     1202:  452-block  0
call    0 returned 1202
branch  1 taken 1202 (fallthrough)
branch  2 taken 0 (throw)
        -:  453:                }
        -:  454:
     9326:  455:                if (algorithm::firstToken(curline) == "f") {
     4663:  455-block  0
call    0 returned 4663
branch  1 taken 4663 (fallthrough)
branch  2 taken 0 (throw)
     4663:  455-block  1
branch  3 taken 2256 (fallthrough)
branch  4 taken 2407
        -:  456:
        -:  457:                    std::vector<Vertex> vVerts;
     4512:  458:                    GenVerticesFromRawOBJ(vVerts, Positions, TCoords, Normals, curline);
     2256:  458-block  0
call    0 returned 2256
branch  1 taken 2256 (fallthrough)
branch  2 taken 0 (throw)
     2256:  458-block  1
    $$$$$:  458-block  2
branch  3 never executed
branch  4 never executed
        -:  459:
        -:  460:
     9024:  461:                    for (int i = 0; i < int(vVerts.size()); i++) {
     9024:  461-block  0
branch  0 taken 6768 (fallthrough)
branch  1 taken 2256
     6768:  461-block  1
     6768:  462:                        Vertices.push_back(vVerts[i]);
     6768:  462-block  0
call    0 returned 6768
branch  1 taken 6768 (fallthrough)
branch  2 taken 0 (throw)
        -:  463:
     6768:  464:                        LoadedVertices.push_back(vVerts[i]);
     6768:  464-block  0
call    0 returned 6768
branch  1 taken 6768 (fallthrough)
branch  2 taken 0 (throw)
        -:  465:                    }
        -:  466:
        -:  467:                    std::vector<unsigned int> iIndices;
        -:  468:
     2256:  469:                    VertexTriangluation(iIndices, vVerts);
     2256:  469-block  0
call    0 returned 2256
branch  1 taken 2256 (fallthrough)
branch  2 taken 0 (throw)
        -:  470:
        -:  471:
     9024:  472:                    for (int i = 0; i < int(iIndices.size()); i++) {
     9024:  472-block  0
branch  0 taken 6768 (fallthrough)
branch  1 taken 2256
     6768:  472-block  1
     6768:  473:                        unsigned int indnum = (unsigned int) ((Vertices.size()) - vVerts.size()) + iIndices[i];
     6768:  473-block  0
call    0 returned 6768
branch  1 taken 6768 (fallthrough)
branch  2 taken 0 (throw)
     6768:  474:                        Indices.push_back(indnum);
     6768:  474-block  0
call    0 returned 6768
branch  1 taken 6768 (fallthrough)
branch  2 taken 0 (throw)
        -:  475:
     6768:  476:                        indnum = (unsigned int) ((LoadedVertices.size()) - vVerts.size()) + iIndices[i];
     6768:  476-block  0
call    0 returned 6768
branch  1 taken 6768 (fallthrough)
branch  2 taken 0 (throw)
     6768:  477:                        LoadedIndices.push_back(indnum);
     6768:  477-block  0
call    0 returned 6768
branch  1 taken 6768 (fallthrough)
branch  2 taken 0 (throw)
        -:  478:
        -:  479:                    }
        -:  480:                }
        -:  481:
     9326:  482:                if (algorithm::firstToken(curline) == "usemtl") {
     4663:  482-block  0
call    0 returned 4663
branch  1 taken 4663 (fallthrough)
branch  2 taken 0 (throw)
     4663:  482-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 4663
    #####:  483:                    MeshMatNames.push_back(algorithm::tail(curline));
    %%%%%:  483-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  483-block  1
branch  3 never executed
branch  4 never executed
        -:  484:
        -:  485:
    #####:  486:                    if (!Indices.empty() && !Vertices.empty()) {
    %%%%%:  486-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  486-block  1
branch  2 never executed
branch  3 never executed
        -:  487:
    #####:  488:                        tempMesh = Mesh(Vertices, Indices);
    %%%%%:  488-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  488-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -:  489:                        tempMesh.MeshName = meshname;
        -:  490:                        int i = 2;
        -:  491:                        while (1) {
    #####:  492:                            tempMesh.MeshName = meshname + "_" + std::to_string(i);
    %%%%%:  492-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  492-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  492-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  492-block  3
call    9 never executed
    %%%%%:  492-block  4
branch 10 never executed
branch 11 never executed
    %%%%%:  492-block  5
branch 12 never executed
branch 13 never executed
    $$$$$:  492-block  6
branch 14 never executed
branch 15 never executed
    $$$$$:  492-block  7
branch 16 never executed
branch 17 never executed
        -:  493:
        -:  494:                            for (auto& m: LoadedMeshes)
        -:  495:                                if (m.MeshName == tempMesh.MeshName)
        -:  496:                                    continue;
        -:  497:                            break;
        -:  498:                        }
        -:  499:
        -:  500:
    #####:  501:                        LoadedMeshes.push_back(tempMesh);
    %%%%%:  501-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  502:
        -:  503:
        -:  504:                        Vertices.clear();
        -:  505:                        Indices.clear();
        -:  506:                    }
        -:  507:
        -:  508:#ifdef OBJL_CONSOLE_OUTPUT
        -:  509:                    outputIndicator = 0;
        -:  510:#endif
        -:  511:                }
        -:  512:
     9326:  513:                if (algorithm::firstToken(curline) == "mtllib") {
     4663:  513-block  0
call    0 returned 4663
branch  1 taken 4663 (fallthrough)
branch  2 taken 0 (throw)
     4663:  513-block  1
branch  3 taken 4663
branch  4 taken 0 (fallthrough)
        -:  514:
        -:  515:
    #####:  516:                    std::vector<std::string> temp;
    %%%%%:  516-block  0
call    0 never executed
    #####:  517:                    algorithm::split(Path, temp, "/");
    %%%%%:  517-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  517-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  518:
    #####:  519:                    std::string pathtomat = "";
    %%%%%:  519-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  519-block  1
branch  3 never executed
branch  4 never executed
    $$$$$:  519-block  2
call    5 never executed
        -:  520:
    #####:  521:                    if (temp.size() != 1) {
    %%%%%:  521-block  0
branch  0 never executed
branch  1 never executed
    #####:  522:                        for (int i = 0; i < temp.size() - 1; i++) {
    %%%%%:  522-block  0
branch  0 never executed
branch  1 never executed
    #####:  523:                            pathtomat += temp[i] + "/";
    %%%%%:  523-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  523-block  1
        -:  524:                        }
        -:  525:                    }
        -:  526:
        -:  527:
    #####:  528:                    pathtomat += algorithm::tail(curline);
    %%%%%:  528-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  528-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  529:
        -:  530:#ifdef OBJL_CONSOLE_OUTPUT
        -:  531:                    std::cout << std::endl << "- find materials in: " << pathtomat << std::endl;
        -:  532:#endif
        -:  533:
        -:  534:
    #####:  535:                    LoadMaterials(pathtomat);
    %%%%%:  535-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  535-block  1
branch  3 never executed
branch  4 never executed
    $$$$$:  535-block  2
branch  5 never executed
branch  6 never executed
        -:  536:                }
        -:  537:            }
        -:  538:
        -:  539:#ifdef OBJL_CONSOLE_OUTPUT
        -:  540:            std::cout << std::endl;
        -:  541:#endif
        -:  542:
        -:  543:
        1:  544:            if (!Indices.empty() && !Vertices.empty()) {
        1:  544-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  544-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        -:  545:
        1:  546:                tempMesh = Mesh(Vertices, Indices);
        1:  546-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  546-block  1
call    3 returned 1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        -:  547:                tempMesh.MeshName = meshname;
        -:  548:
        -:  549:
        1:  550:                LoadedMeshes.push_back(tempMesh);
        1:  550-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  551:            }
        -:  552:
        1:  553:            file.close();
        1:  553-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  554:
        -:  555:
       1*:  556:            for (int i = 0; i < MeshMatNames.size(); i++) {
        1:  556-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  556-block  1
        -:  557:                std::string matname = MeshMatNames[i];
        -:  558:
        -:  559:
    #####:  560:                for (int j = 0; j < LoadedMaterials.size(); j++) {
    %%%%%:  560-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  560-block  1
    #####:  561:                    if (LoadedMaterials[j].name == matname) {
    %%%%%:  561-block  0
branch  0 never executed
branch  1 never executed
    #####:  562:                        LoadedMeshes[i].MeshMaterial = LoadedMaterials[j];
    %%%%%:  562-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  563:                        break;
        -:  564:                    }
        -:  565:                }
        -:  566:            }
        -:  567:
       1*:  568:            if (LoadedMeshes.empty() && LoadedVertices.empty() && LoadedIndices.empty()) {
        1:  568-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  568-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  568-block  2
branch  4 never executed
branch  5 never executed
    #####:  569:                return false;
    %%%%%:  569-block  0
        -:  570:            } else {
        -:  571:                return true;
        -:  572:            }
        -:  573:        }
        -:  574:
        -:  575:
        -:  576:        std::vector<Mesh> LoadedMeshes;
        -:  577:
        -:  578:        std::vector<Vertex> LoadedVertices;
        -:  579:
        -:  580:        std::vector<unsigned int> LoadedIndices;
        -:  581:
        -:  582:        std::vector<Material> LoadedMaterials;
        -:  583:
        -:  584:    private:
        -:  585:
        -:  586:
function _ZN4objl6Loader21GenVerticesFromRawOBJERSt6vectorINS_6VertexESaIS2_EERKS1_INS_7Vector3ESaIS6_EERKS1_INS_7Vector2ESaISB_EESA_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 2256 returned 100% blocks executed 42%
     2256:  587:        void GenVerticesFromRawOBJ (std::vector<Vertex>& oVerts,
     2256:  587-block  0
call    0 returned 2256
branch  1 taken 2256 (fallthrough)
branch  2 taken 0 (throw)
        -:  588:                                    const std::vector<Vector3>& iPositions,
        -:  589:                                    const std::vector<Vector2>& iTCoords,
        -:  590:                                    const std::vector<Vector3>& iNormals,
        -:  591:                                    std::string icurline) {
     2256:  592:            std::vector<std::string> sface, svert;
     2256:  592-block  0
call    0 returned 2256
call    1 returned 2256
    $$$$$:  592-block  1
call    2 never executed
        -:  593:            Vertex vVert;
     4512:  594:            algorithm::split(algorithm::tail(icurline), sface, " ");
     2256:  594-block  0
call    0 returned 2256
branch  1 taken 2256 (fallthrough)
branch  2 taken 0 (throw)
     2256:  594-block  1
call    3 returned 2256
branch  4 taken 2256 (fallthrough)
branch  5 taken 0 (throw)
     2256:  594-block  2
call    6 returned 2256
branch  7 taken 2256 (fallthrough)
branch  8 taken 0 (throw)
     2256:  594-block  3
branch  9 taken 0 (fallthrough)
branch 10 taken 2256
     2256:  594-block  4
    $$$$$:  594-block  5
branch 11 never executed
branch 12 never executed
        -:  595:
        -:  596:            bool noNormal = false;
        -:  597:
        -:  598:
     9024:  599:            for (int i = 0; i < int(sface.size()); i++) {
     9024:  599-block  0
branch  0 taken 6768 (fallthrough)
branch  1 taken 2256
     6768:  599-block  1
        -:  600:
        -:  601:                int vtype;
        -:  602:
    13536:  603:                algorithm::split(sface[i], svert, "/");
     6768:  603-block  0
call    0 returned 6768
branch  1 taken 6768 (fallthrough)
branch  2 taken 0 (throw)
     6768:  603-block  1
call    3 returned 6768
branch  4 taken 6768 (fallthrough)
branch  5 taken 0 (throw)
     6768:  603-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 6768
    $$$$$:  603-block  3
call    8 never executed
        -:  604:
        -:  605:
     6768:  606:                if (svert.size() == 1) {
     6768:  606-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 6768
        -:  607:
        -:  608:                    vtype = 1;
        -:  609:                }
        -:  610:
        -:  611:
     6768:  612:                if (svert.size() == 2) {
     6768:  612-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 6768
        -:  613:
        -:  614:                    vtype = 2;
        -:  615:                }
        -:  616:
        -:  617:
     6768:  618:                if (svert.size() == 3) {
     6768:  618-block  0
branch  0 taken 6768 (fallthrough)
branch  1 taken 0
     6768:  619:                    if (svert[1] != "") {
     6768:  619-block  0
branch  0 taken 6768
branch  1 taken 0
        -:  620:
        -:  621:                        vtype = 4;
        -:  622:                    } else {
        -:  623:
        -:  624:                        vtype = 3;
        -:  625:                    }
        -:  626:                }
        -:  627:
        -:  628:
    #####:  629:                switch (vtype) {
    %%%%%:  629-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:  630:                    case 1: {
    #####:  631:                        vVert.Position = algorithm::getElement(iPositions, svert[0]);
    %%%%%:  631-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  632:                        vVert.TextureCoordinate = Vector2(0, 0);
        -:  633:                        noNormal = true;
    #####:  634:                        oVerts.push_back(vVert);
    %%%%%:  634-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  635:                        break;
        -:  636:                    }
        -:  637:                    case 2: {
    #####:  638:                        vVert.Position = algorithm::getElement(iPositions, svert[0]);
    %%%%%:  638-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  638-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  639:                        vVert.TextureCoordinate = algorithm::getElement(iTCoords, svert[1]);
    %%%%%:  639-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  640:                        noNormal = true;
    #####:  641:                        oVerts.push_back(vVert);
    %%%%%:  641-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  642:                        break;
        -:  643:                    }
        -:  644:                    case 3: {
     6768:  645:                        vVert.Position = algorithm::getElement(iPositions, svert[0]);
     6768:  645-block  0
call    0 returned 6768
branch  1 taken 6768 (fallthrough)
branch  2 taken 0 (throw)
     6768:  646:                        vVert.TextureCoordinate = Vector2(0, 0);
     6768:  646-block  0
call    0 returned 6768
branch  1 taken 6768 (fallthrough)
branch  2 taken 0 (throw)
     6768:  647:                        vVert.Normal = algorithm::getElement(iNormals, svert[2]);
     6768:  647-block  0
call    0 returned 6768
branch  1 taken 6768 (fallthrough)
branch  2 taken 0 (throw)
     6768:  648:                        oVerts.push_back(vVert);
     6768:  648-block  0
call    0 returned 6768
branch  1 taken 6768 (fallthrough)
branch  2 taken 0 (throw)
        -:  649:                        break;
        -:  650:                    }
        -:  651:                    case 4: {
    #####:  652:                        vVert.Position = algorithm::getElement(iPositions, svert[0]);
    %%%%%:  652-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  652-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  653:                        vVert.TextureCoordinate = algorithm::getElement(iTCoords, svert[1]);
    %%%%%:  653-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  653-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  654:                        vVert.Normal = algorithm::getElement(iNormals, svert[2]);
    %%%%%:  654-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  655:                        oVerts.push_back(vVert);
    %%%%%:  655-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  656:                        break;
        -:  657:                    }
        -:  658:                    default: {
        -:  659:                        break;
        -:  660:                    }
        -:  661:                }
        -:  662:            }
        -:  663:
        -:  664:
     2256:  665:            if (noNormal) {
     2256:  665-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2256
        -:  666:                Vector3 A = oVerts[0].Position - oVerts[1].Position;
        -:  667:                Vector3 B = oVerts[2].Position - oVerts[1].Position;
        -:  668:
        -:  669:                Vector3 normal = math::CrossV3(A, B);
        -:  670:
    #####:  671:                for (int i = 0; i < int(oVerts.size()); i++) {
    %%%%%:  671-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  671-block  1
    #####:  672:                    oVerts[i].Normal = normal;
    %%%%%:  672-block  0
        -:  673:                }
        -:  674:            }
     2256:  675:        }
        -:  676:
        -:  677:
function _ZN4objl6Loader19VertexTriangluationERSt6vectorIjSaIjEERKS1_INS_6VertexESaIS5_EE called 2256 returned 100% blocks executed 6%
     2256:  678:        void VertexTriangluation (std::vector<unsigned int>& oIndices,
     2256:  678-block  0
branch  0 taken 2256 (fallthrough)
branch  1 taken 0
        -:  679:                                  const std::vector<Vertex>& iVerts) {
        -:  680:
        -:  681:
     2256:  682:            if (iVerts.size() < 3) {
     2256:  682-block  0
branch  0 taken 2256 (fallthrough)
branch  1 taken 0
     2256:  683:                return;
     2256:  683-block  0
        -:  684:            }
        -:  685:
     2256:  686:            if (iVerts.size() == 3) {
     2256:  686-block  0
branch  0 taken 2256 (fallthrough)
branch  1 taken 0
     2256:  687:                oIndices.push_back(0);
     2256:  687-block  0
call    0 returned 2256
     2256:  688:                oIndices.push_back(1);
call    0 returned 2256
     2256:  689:                oIndices.push_back(2);
call    0 returned 2256
     2256:  690:                return;
        -:  691:            }
        -:  692:
        -:  693:
    #####:  694:            std::vector<Vertex> tVerts = iVerts;
    %%%%%:  694-block  0
call    0 never executed
        -:  695:
        -:  696:            while (true) {
        -:  697:
    #####:  698:                for (int i = 0; i < int(tVerts.size()); i++) {
    %%%%%:  698-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  698-block  1
        -:  699:
        -:  700:                    Vertex pPrev;
    #####:  701:                    if (i == 0) {
    %%%%%:  701-block  0
branch  0 never executed
branch  1 never executed
    #####:  702:                        pPrev = tVerts[tVerts.size() - 1];
    %%%%%:  702-block  0
        -:  703:                    } else {
    #####:  704:                        pPrev = tVerts[i - 1];
    %%%%%:  704-block  0
        -:  705:                    }
        -:  706:
        -:  707:
    #####:  708:                    Vertex pCur = tVerts[i];
    %%%%%:  708-block  0
branch  0 never executed
branch  1 never executed
        -:  709:
        -:  710:
        -:  711:                    Vertex pNext;
    #####:  712:                    if (i == tVerts.size() - 1) {
    %%%%%:  712-block  0
branch  0 never executed
branch  1 never executed
    #####:  713:                        pNext = tVerts[0];
    %%%%%:  713-block  0
        -:  714:                    } else {
    #####:  715:                        pNext = tVerts[i + 1];
    %%%%%:  715-block  0
        -:  716:                    }
        -:  717:
        -:  718:
    #####:  719:                    if (tVerts.size() == 3) {
    %%%%%:  719-block  0
branch  0 never executed
branch  1 never executed
        -:  720:
    #####:  721:                        for (int j = 0; j < int(tVerts.size()); j++) {
    %%%%%:  721-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  721-block  1
    #####:  722:                            if (iVerts[j].Position == pCur.Position)
    %%%%%:  722-block  0
branch  0 never executed
branch  1 never executed
    #####:  723:                                oIndices.push_back(j);
    %%%%%:  723-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  723-block  1
        -:  724:                            if (iVerts[j].Position == pPrev.Position)
    #####:  725:                                oIndices.push_back(j);
    %%%%%:  725-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  725-block  1
        -:  726:                            if (iVerts[j].Position == pNext.Position)
    #####:  727:                                oIndices.push_back(j);
    %%%%%:  727-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  727-block  1
        -:  728:                        }
        -:  729:
        -:  730:                        tVerts.clear();
    #####:  731:                        break;
    %%%%%:  731-block  0
        -:  732:                    }
    #####:  733:                    if (tVerts.size() == 4) {
    %%%%%:  733-block  0
branch  0 never executed
branch  1 never executed
        -:  734:
    #####:  735:                        for (int j = 0; j < int(iVerts.size()); j++) {
    %%%%%:  735-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  735-block  1
    #####:  736:                            if (iVerts[j].Position == pCur.Position)
    %%%%%:  736-block  0
branch  0 never executed
branch  1 never executed
    #####:  737:                                oIndices.push_back(j);
    %%%%%:  737-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  737-block  1
        -:  738:                            if (iVerts[j].Position == pPrev.Position)
    #####:  739:                                oIndices.push_back(j);
    %%%%%:  739-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  739-block  1
        -:  740:                            if (iVerts[j].Position == pNext.Position)
    #####:  741:                                oIndices.push_back(j);
    %%%%%:  741-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  741-block  1
        -:  742:                        }
        -:  743:
        -:  744:                        Vector3 tempVec;
    #####:  745:                        for (int j = 0; j < int(tVerts.size()); j++) {
    %%%%%:  745-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  745-block  1
    #####:  746:                            if (tVerts[j].Position != pCur.Position
    %%%%%:  746-block  0
branch  0 never executed
branch  1 never executed
        -:  747:                                && tVerts[j].Position != pPrev.Position
        -:  748:                                && tVerts[j].Position != pNext.Position) {
    #####:  749:                                tempVec = tVerts[j].Position;
    #####:  750:                                break;
    %%%%%:  750-block  0
        -:  751:                            }
        -:  752:                        }
        -:  753:
        -:  754:
    #####:  755:                        for (int j = 0; j < int(iVerts.size()); j++) {
    %%%%%:  755-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  755-block  1
    #####:  756:                            if (iVerts[j].Position == pPrev.Position)
    %%%%%:  756-block  0
branch  0 never executed
branch  1 never executed
    #####:  757:                                oIndices.push_back(j);
    %%%%%:  757-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  757-block  1
        -:  758:                            if (iVerts[j].Position == pNext.Position)
    #####:  759:                                oIndices.push_back(j);
    %%%%%:  759-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  759-block  1
        -:  760:                            if (iVerts[j].Position == tempVec)
    #####:  761:                                oIndices.push_back(j);
    %%%%%:  761-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  761-block  1
        -:  762:                        }
        -:  763:
        -:  764:                        tVerts.clear();
        -:  765:                        break;
        -:  766:                    }
        -:  767:
        -:  768:
    #####:  769:                    float angle = math::AngleBetweenV3(pPrev.Position - pCur.Position, pNext.Position - pCur.Position) * (180 / 3.14159265359);
    %%%%%:  769-block  0
call    0 never executed
    #####:  770:                    if (angle <= 0 && angle >= 180)
branch  0 never executed
branch  1 never executed
    %%%%%:  770-block  0
branch  2 never executed
branch  3 never executed
    #####:  771:                        continue;
    %%%%%:  771-block  0
    %%%%%:  771-block  1
        -:  772:
        -:  773:
        -:  774:                    bool inTri = false;
    #####:  775:                    for (int j = 0; j < int(iVerts.size()); j++) {
    %%%%%:  775-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  775-block  1
    #####:  776:                        if (algorithm::inTriangle(iVerts[j].Position, pPrev.Position, pCur.Position, pNext.Position)
    %%%%%:  776-block  0
call    0 never executed
        -:  777:                            && iVerts[j].Position != pPrev.Position
        -:  778:                            && iVerts[j].Position != pCur.Position
    #####:  779:                            && iVerts[j].Position != pNext.Position) {
branch  0 never executed
branch  1 never executed
        -:  780:                            inTri = true;
        -:  781:                            break;
        -:  782:                        }
        -:  783:                    }
    #####:  784:                    if (inTri)
    %%%%%:  784-block  0
branch  0 never executed
branch  1 never executed
    #####:  785:                        continue;
    %%%%%:  785-block  0
        -:  786:
        -:  787:
    #####:  788:                    for (int j = 0; j < int(iVerts.size()); j++) {
    %%%%%:  788-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  788-block  1
    #####:  789:                        if (iVerts[j].Position == pCur.Position)
    %%%%%:  789-block  0
branch  0 never executed
branch  1 never executed
    #####:  790:                            oIndices.push_back(j);
    %%%%%:  790-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  790-block  1
        -:  791:                        if (iVerts[j].Position == pPrev.Position)
    #####:  792:                            oIndices.push_back(j);
    %%%%%:  792-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  792-block  1
        -:  793:                        if (iVerts[j].Position == pNext.Position)
    #####:  794:                            oIndices.push_back(j);
    %%%%%:  794-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  794-block  1
    $$$$$:  794-block  2
branch  3 never executed
branch  4 never executed
        -:  795:                    }
        -:  796:
        -:  797:
    #####:  798:                    for (int j = 0; j < int(tVerts.size()); j++) {
    %%%%%:  798-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  798-block  1
    #####:  799:                        if (tVerts[j].Position == pCur.Position) {
    %%%%%:  799-block  0
branch  0 never executed
branch  1 never executed
        -:  800:                            tVerts.erase(tVerts.begin() + j);
    #####:  801:                            break;
        -:  802:                        }
        -:  803:                    }
        -:  804:
        -:  805:
        -:  806:                    i = -1;
        -:  807:                }
        -:  808:
        -:  809:
    #####:  810:                if (oIndices.size() == 0)
    %%%%%:  810-block  0
branch  0 never executed
branch  1 never executed
        -:  811:                    break;
        -:  812:
        -:  813:
    #####:  814:                if (tVerts.size() == 0)
    %%%%%:  814-block  0
branch  0 never executed
branch  1 never executed
        -:  815:                    break;
        -:  816:            }
        -:  817:        }
        -:  818:
        -:  819:
function _ZN4objl6Loader13LoadMaterialsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  820:        bool LoadMaterials (std::string path) {
    %%%%%:  820-block  0
call    0 never executed
        -:  821:
    #####:  822:            if (path.substr(path.size() - 4, path.size()) != ".mtl")
    %%%%%:  822-block  0
call    0 never executed
    %%%%%:  822-block  1
branch  1 never executed
branch  2 never executed
        -:  823:                return false;
        -:  824:
    #####:  825:            std::ifstream file(path);
    %%%%%:  825-block  0
call    0 never executed
    %%%%%:  825-block  1
call    1 never executed
    $$$$$:  825-block  2
call    2 never executed
        -:  826:
        -:  827:
    #####:  828:            if (!file.is_open())
branch  0 never executed
branch  1 never executed
        -:  829:                return false;
        -:  830:
    #####:  831:            Material tempMaterial;
    %%%%%:  831-block  0
call    0 never executed
    %%%%%:  831-block  1
call    1 never executed
    $$$$$:  831-block  2
call    2 never executed
        -:  832:
        -:  833:            bool listening = false;
        -:  834:
        -:  835:
        -:  836:            std::string curline;
    #####:  837:            while (std::getline(file, curline)) {
    %%%%%:  837-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  837-block  1
branch  3 never executed
branch  4 never executed
        -:  838:
    #####:  839:                if (algorithm::firstToken(curline) == "newmtl") {
    %%%%%:  839-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  839-block  1
branch  3 never executed
branch  4 never executed
    #####:  840:                    if (!listening) {
    %%%%%:  840-block  0
branch  0 never executed
branch  1 never executed
        -:  841:                        listening = true;
        -:  842:
    #####:  843:                        if (curline.size() > 7) {
    %%%%%:  843-block  0
branch  0 never executed
branch  1 never executed
    #####:  844:                            tempMaterial.name = algorithm::tail(curline);
    %%%%%:  844-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  844-block  1
call    3 never executed
    %%%%%:  844-block  2
        -:  845:                        } else {
        -:  846:                            tempMaterial.name = "none";
        -:  847:                        }
        -:  848:                    } else {
        -:  849:
        -:  850:
    #####:  851:                        LoadedMaterials.push_back(tempMaterial);
    %%%%%:  851-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  852:
        -:  853:
    #####:  854:                        tempMaterial = Material();
    %%%%%:  854-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  855:
    #####:  856:                        if (curline.size() > 7) {
branch  0 never executed
branch  1 never executed
    #####:  857:                            tempMaterial.name = algorithm::tail(curline);
    %%%%%:  857-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  857-block  1
call    3 never executed
    %%%%%:  857-block  2
        -:  858:                        } else {
        -:  859:                            tempMaterial.name = "none";
        -:  860:                        }
        -:  861:                    }
        -:  862:                }
        -:  863:
    #####:  864:                if (algorithm::firstToken(curline) == "Ka") {
    %%%%%:  864-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  864-block  1
branch  3 never executed
branch  4 never executed
    #####:  865:                    std::vector<std::string> temp;
    #####:  866:                    algorithm::split(algorithm::tail(curline), temp, " ");
    %%%%%:  866-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  866-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  866-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  866-block  3
branch  9 never executed
branch 10 never executed
    %%%%%:  866-block  4
branch 11 never executed
branch 12 never executed
    $$$$$:  866-block  5
branch 13 never executed
branch 14 never executed
    $$$$$:  866-block  6
call   15 never executed
        -:  867:
    #####:  868:                    if (temp.size() != 3)
    %%%%%:  868-block  0
branch  0 never executed
branch  1 never executed
    #####:  869:                        continue;
    %%%%%:  869-block  0
call    0 never executed
        -:  870:
    #####:  871:                    tempMaterial.Ka.X = std::stof(temp[0]);
    %%%%%:  871-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  872:                    tempMaterial.Ka.Y = std::stof(temp[1]);
    %%%%%:  872-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  873:                    tempMaterial.Ka.Z = std::stof(temp[2]);
    %%%%%:  873-block  0
call    0 never executed
        -:  874:                }
        -:  875:
    #####:  876:                if (algorithm::firstToken(curline) == "Kd") {
    %%%%%:  876-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  876-block  1
branch  3 never executed
branch  4 never executed
    #####:  877:                    std::vector<std::string> temp;
    #####:  878:                    algorithm::split(algorithm::tail(curline), temp, " ");
    %%%%%:  878-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  878-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  878-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  878-block  3
branch  9 never executed
branch 10 never executed
    %%%%%:  878-block  4
branch 11 never executed
branch 12 never executed
    $$$$$:  878-block  5
branch 13 never executed
branch 14 never executed
    $$$$$:  878-block  6
call   15 never executed
        -:  879:
    #####:  880:                    if (temp.size() != 3)
    %%%%%:  880-block  0
branch  0 never executed
branch  1 never executed
    #####:  881:                        continue;
    %%%%%:  881-block  0
call    0 never executed
        -:  882:
    #####:  883:                    tempMaterial.Kd.X = std::stof(temp[0]);
    %%%%%:  883-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  884:                    tempMaterial.Kd.Y = std::stof(temp[1]);
    %%%%%:  884-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  885:                    tempMaterial.Kd.Z = std::stof(temp[2]);
    %%%%%:  885-block  0
call    0 never executed
        -:  886:                }
        -:  887:
    #####:  888:                if (algorithm::firstToken(curline) == "Ks") {
    %%%%%:  888-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  888-block  1
branch  3 never executed
branch  4 never executed
    #####:  889:                    std::vector<std::string> temp;
    #####:  890:                    algorithm::split(algorithm::tail(curline), temp, " ");
    %%%%%:  890-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  890-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  890-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  890-block  3
branch  9 never executed
branch 10 never executed
    %%%%%:  890-block  4
branch 11 never executed
branch 12 never executed
    $$$$$:  890-block  5
branch 13 never executed
branch 14 never executed
    $$$$$:  890-block  6
call   15 never executed
        -:  891:
    #####:  892:                    if (temp.size() != 3)
    %%%%%:  892-block  0
branch  0 never executed
branch  1 never executed
    #####:  893:                        continue;
    %%%%%:  893-block  0
call    0 never executed
        -:  894:
    #####:  895:                    tempMaterial.Ks.X = std::stof(temp[0]);
    %%%%%:  895-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  896:                    tempMaterial.Ks.Y = std::stof(temp[1]);
    %%%%%:  896-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  897:                    tempMaterial.Ks.Z = std::stof(temp[2]);
    %%%%%:  897-block  0
call    0 never executed
        -:  898:                }
        -:  899:
    #####:  900:                if (algorithm::firstToken(curline) == "Ns") {
    %%%%%:  900-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  900-block  1
branch  3 never executed
branch  4 never executed
    #####:  901:                    tempMaterial.Ns = std::stof(algorithm::tail(curline));
    %%%%%:  901-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  901-block  1
branch  3 never executed
branch  4 never executed
    %%%%%:  901-block  2
        -:  902:                }
        -:  903:
    #####:  904:                if (algorithm::firstToken(curline) == "Ni") {
    %%%%%:  904-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  904-block  1
branch  3 never executed
branch  4 never executed
    #####:  905:                    tempMaterial.Ni = std::stof(algorithm::tail(curline));
    %%%%%:  905-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  905-block  1
branch  3 never executed
branch  4 never executed
    %%%%%:  905-block  2
        -:  906:                }
        -:  907:
    #####:  908:                if (algorithm::firstToken(curline) == "d") {
    %%%%%:  908-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  908-block  1
branch  3 never executed
branch  4 never executed
    #####:  909:                    tempMaterial.d = std::stof(algorithm::tail(curline));
    %%%%%:  909-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  909-block  1
branch  3 never executed
branch  4 never executed
    %%%%%:  909-block  2
        -:  910:                }
        -:  911:
    #####:  912:                if (algorithm::firstToken(curline) == "illum") {
    %%%%%:  912-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  912-block  1
branch  3 never executed
branch  4 never executed
    #####:  913:                    tempMaterial.illum = std::stoi(algorithm::tail(curline));
    %%%%%:  913-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  913-block  1
branch  3 never executed
branch  4 never executed
    %%%%%:  913-block  2
        -:  914:                }
        -:  915:
    #####:  916:                if (algorithm::firstToken(curline) == "map_Ka") {
    %%%%%:  916-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  916-block  1
branch  3 never executed
branch  4 never executed
    #####:  917:                    tempMaterial.map_Ka = algorithm::tail(curline);
    %%%%%:  917-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  917-block  1
call    3 never executed
    %%%%%:  917-block  2
        -:  918:                }
        -:  919:
    #####:  920:                if (algorithm::firstToken(curline) == "map_Kd") {
    %%%%%:  920-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  920-block  1
branch  3 never executed
branch  4 never executed
    #####:  921:                    tempMaterial.map_Kd = algorithm::tail(curline);
    %%%%%:  921-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  921-block  1
call    3 never executed
    %%%%%:  921-block  2
        -:  922:                }
        -:  923:
    #####:  924:                if (algorithm::firstToken(curline) == "map_Ks") {
    %%%%%:  924-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  924-block  1
branch  3 never executed
branch  4 never executed
    #####:  925:                    tempMaterial.map_Ks = algorithm::tail(curline);
    %%%%%:  925-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  925-block  1
call    3 never executed
    %%%%%:  925-block  2
        -:  926:                }
        -:  927:
    #####:  928:                if (algorithm::firstToken(curline) == "map_Ns") {
    %%%%%:  928-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  928-block  1
branch  3 never executed
branch  4 never executed
    #####:  929:                    tempMaterial.map_Ns = algorithm::tail(curline);
    %%%%%:  929-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  929-block  1
call    3 never executed
    %%%%%:  929-block  2
        -:  930:                }
        -:  931:
    #####:  932:                if (algorithm::firstToken(curline) == "map_d") {
    %%%%%:  932-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  932-block  1
branch  3 never executed
branch  4 never executed
    #####:  933:                    tempMaterial.map_d = algorithm::tail(curline);
    %%%%%:  933-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  933-block  1
call    3 never executed
    %%%%%:  933-block  2
        -:  934:                }
        -:  935:
    #####:  936:                if (algorithm::firstToken(curline) == "map_Bump" || algorithm::firstToken(curline) == "map_bump" || algorithm::firstToken(curline) == "bump") {
    %%%%%:  936-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  936-block  1
branch  3 never executed
branch  4 never executed
    %%%%%:  936-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  936-block  3
branch  8 never executed
branch  9 never executed
    %%%%%:  936-block  4
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  936-block  5
branch 13 never executed
branch 14 never executed
    %%%%%:  936-block  6
branch 15 never executed
branch 16 never executed
    %%%%%:  936-block  7
branch 17 never executed
branch 18 never executed
    %%%%%:  936-block  8
branch 19 never executed
branch 20 never executed
    %%%%%:  936-block  9
branch 21 never executed
branch 22 never executed
    $$$$$:  936-block 10
branch 23 never executed
branch 24 never executed
    $$$$$:  936-block 11
branch 25 never executed
branch 26 never executed
    $$$$$:  936-block 12
branch 27 never executed
branch 28 never executed
    #####:  937:                    tempMaterial.map_bump = algorithm::tail(curline);
    %%%%%:  937-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  937-block  1
call    3 never executed
    %%%%%:  937-block  2
        -:  938:                }
        -:  939:            }
        -:  940:
        -:  941:
    #####:  942:            LoadedMaterials.push_back(tempMaterial);
    %%%%%:  942-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  943:
        -:  944:
    #####:  945:            if (LoadedMaterials.empty())
    %%%%%:  945-block  0
branch  0 never executed
branch  1 never executed
        -:  946:                return false;
        -:  947:
        -:  948:            else
    #####:  949:                return true;
    %%%%%:  949-block  0
        -:  950:        }
        -:  951:    };
        -:  952:}

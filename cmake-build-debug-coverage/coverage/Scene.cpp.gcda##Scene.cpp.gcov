        -:    0:Source:/home/kaappo/git/raytracercpp/src/core/engine/Scene.cpp
        -:    0:Graph:/home/kaappo/git/raytracercpp/cmake-build-debug-coverage/CMakeFiles/Main.dir/src/core/engine/Scene.cpp.gcno
        -:    0:Data:/home/kaappo/git/raytracercpp/cmake-build-debug-coverage/CMakeFiles/Main.dir/src/core/engine/Scene.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by kaappo on 11.9.2021.
        -:    3://
        -:    4:
        -:    5:#include "Scene.h"
        -:    6:#include "../light/Intensity.h"
        -:    7:#include "../common/LightSource.h"
        -:    8:#include "../light/IntensityBlend.h"
        -:    9:#include "../common/mytypes.h"
        -:   10:
        -:   11:#include <utility>
        -:   12:#include <cmath>
        -:   13:
        -:   14://#include <numbers>
        -:   15:constexpr double PI = 3.1415926;
        -:   16:
function _ZN5SceneC2ERKSt6vectorIP7SurfaceSaIS2_EERKS0_I11LightSourceSaIS7_EERK6Cameraii called 1 returned 100% blocks executed 57%
        1:   17:Scene::Scene (const std::vector<Surface*>& objects, const std::vector<LightSource>& lightSources, const Camera& camera, int raysPerPixel, int antialiasingScaler) : objects(std::move(objects)), camera(camera), lightSources(std::move(lightSources)), raysPerPixel{raysPerPixel}, antialiasingScaler{antialiasingScaler} {}
        1:   17-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   17-block  1
        -:   18:
        -:   19:#pragma clang diagnostic push
        -:   20:
function _ZNK5Scene5traceEi called 1 returned 100% blocks executed 77%
        1:   21:std::vector<std::vector<Intensity>> Scene::trace (int bounces) const {
        2:   22:    auto viewplane = camera.get_viewplane(antialiasingScaler);
        1:   22-block  0
call    0 returned 1
        1:   22-block  1
call    1 returned 1
    $$$$$:   22-block  2
call    2 never executed
        -:   23:
        1:   24:    unsigned viewport_height = viewplane.size() / antialiasingScaler;
        1:   25:    unsigned viewport_width = viewplane[0].size() / antialiasingScaler;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   26:
        -:   27:    std::vector<std::vector<Intensity>> pixels;
        1:   28:    pixels.reserve(viewport_height);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
      201:   29:    for (int y = 0; y < viewport_height; ++y) {
      201:   29-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 200
      200:   29-block  1
        -:   30:        std::vector<Intensity> row;
      200:   31:        row.reserve(viewport_width);
      200:   31-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
    40200:   32:        for (int x = 0; x < viewport_width; ++x) {
    40200:   32-block  0
branch  0 taken 40000 (fallthrough)
branch  1 taken 200
    40000:   33:            row.emplace_back(0, 0, 0);
    40000:   33-block  0
call    0 returned 40000
branch  1 taken 40000 (fallthrough)
branch  2 taken 0 (throw)
    40000:   33-block  1
    $$$$$:   33-block  2
branch  3 never executed
branch  4 never executed
        -:   34:        }
      200:   35:        pixels.push_back(row);
      200:   35-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
        -:   36:    }
        -:   37:
        -:   38:
        -:   39://#pragma omp parallel for collapse(2)
        -:   40://#pragma omp target teams distribute parallel for  collapse(2)
      201:   41:    for (int y = 0; y < viewport_height; ++y) {
      201:   41-block  0
branch  0 taken 200 (fallthrough)
branch  1 taken 1
      200:   41-block  1
    40200:   42:        for (int x = 0; x < viewport_width; ++x) {
    40200:   42-block  0
branch  0 taken 40000 (fallthrough)
branch  1 taken 200
    40000:   42-block  1
        -:   43:
        -:   44:            IntensityBlend pixelValue;
        -:   45:
    80000:   46:            for (int dy = 0; dy < antialiasingScaler; ++dy) {
    80000:   46-block  0
branch  0 taken 40000 (fallthrough)
branch  1 taken 40000
    40000:   46-block  1
    80000:   47:                for (int dx = 0; dx < antialiasingScaler; ++dx) {
    80000:   47-block  0
branch  0 taken 40000 (fallthrough)
branch  1 taken 40000
    40000:   48:                    const auto& pixel = viewplane[y * antialiasingScaler + dy][x * antialiasingScaler + dx];
    40000:   48-block  0
call    0 returned 40000
branch  1 taken 40000 (fallthrough)
branch  2 taken 0 (throw)
    40000:   49:                    const Ray ray = {camera.getOrigin(), pixel};
    40000:   49-block  0
call    0 returned 40000
branch  1 taken 40000 (fallthrough)
branch  2 taken 0 (throw)
    40000:   49-block  1
call    3 returned 40000
branch  4 taken 40000 (fallthrough)
branch  5 taken 0 (throw)
        -:   50:
    40000:   51:                    pixelValue += calculate_color(ray, x + dx, y + dy, bounces);
    40000:   51-block  0
call    0 returned 40000
branch  1 taken 40000 (fallthrough)
branch  2 taken 0 (throw)
    40000:   51-block  1
call    3 returned 40000
branch  4 taken 40000 (fallthrough)
branch  5 taken 0 (throw)
    40000:   51-block  2
    $$$$$:   51-block  3
branch  6 never executed
branch  7 never executed
        -:   52:
        -:   53:                }
        -:   54:            }
        -:   55:
    40000:   56:            pixels[y][x] = pixelValue.commitBlend();
    40000:   56-block  0
call    0 returned 40000
branch  1 taken 40000 (fallthrough)
branch  2 taken 0 (throw)
    40000:   56-block  1
branch  3 taken 40000 (fallthrough)
branch  4 taken 0
        -:   57:        }
        -:   58:    }
        -:   59:
        1:   60:    return pixels;
        -:   61:}
        -:   62:
        -:   63:#pragma clang diagnostic pop
        -:   64:
function _ZNK5Scene15calculate_colorERK3Rayiii called 40000 returned 100% blocks executed 13%
    40000:   65:Intensity Scene::calculate_color (const Ray& ray, int x, int y, int bounces_left) const {
    40000:   66:    const auto& intersection = get_closest_intersection(ray, 0);
    40000:   66-block  0
call    0 returned 40000
        -:   67://    std::cout << intersection.value() << std::endl;
        -:   68:    if (DEBUG) {
    40000:   69:        if (y % 100 == 0 && x == 0) {
branch  0 taken 2 (fallthrough)
branch  1 taken 39998
        2:   70:            std::cout << "Row " << y << std::endl;
call    0 returned 2
        -:   71:        }
        -:   72:    }
        -:   73:
        -:   74:
    40000:   75:    if (!intersection) {
    40000:   75-block  0
branch  0 taken 40000 (fallthrough)
branch  1 taken 0
    40000:   76:        return Intensity{0, 0, 0};
    40000:   76-block  0
call    0 returned 40000
        -:   77:    } else {
        -:   78:#ifdef DEBUG
        -:   79:        std::cout << "hit!" << std::endl;
        -:   80:#endif
    #####:   81:        const auto closest = *intersection;
        -:   82://        std::cout << closest.position << std::endl;
    #####:   83:        const Material* material = closest.material;
    #####:   84:        const auto* const surface = closest.hitSurface;
        -:   85:
    #####:   86:        const Intensity& albedo = material->get_albedo_at(surface->getUVAt(closest.position));
    %%%%%:   86-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:   87:
        -:   88://        Intensity diffuse_light = {0, 0, 0};
        -:   89:        IntensityBlend diffuse_light;
        -:   90:        IntensityBlend specular_light;
    #####:   91:        const MyVector3& face_normal = surface->getNormalAt(closest.position).normalize();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   91-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:   92:        const MyVector3& N = face_normal;
        -:   93:
    #####:   94:        const MyVector3& d = closest.ray.getDirection();
    %%%%%:   94-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   95:        const MyVector3& R = d.reflection(face_normal).normalize();
    %%%%%:   95-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   95-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:   95-block  2
    #####:   96:        for (int i = 0; i < raysPerPixel; ++i) {
    %%%%%:   96-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   96-block  1
    #####:   97:            for (const auto& lightSource: lightSources) {
    %%%%%:   97-block  0
branch  0 never executed
branch  1 never executed
    #####:   98:                const MyVector3& vector_to_light = (lightSource.position - closest.position).rotateInsideCone(lightSource.radius);
    %%%%%:   98-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   98-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   99:                const MyVector3& V = vector_to_light.normalize();
    %%%%%:   99-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  100:
    #####:  101:                const auto& any_hits = get_closest_intersection({closest.position, V}, vector_to_light.length());
    %%%%%:  101-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  101-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  101-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  101-block  3
branch  9 never executed
branch 10 never executed
        -:  102:
    #####:  103:                if (!any_hits) {
    %%%%%:  103-block  0
branch  0 never executed
branch  1 never executed
    #####:  104:                    double distance_coefficient = 1.0 / vector_to_light.squared();
    %%%%%:  104-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  105:
    #####:  106:                    double diffuse_direction_coefficient = lambertianDiffuseReflection(N, V, d);
    %%%%%:  106-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  107://                    double diffuse_direction_coefficient = orenNayarDiffuseReflection(N, V, R, 1 - material.glossiness);
        -:  108://                    double diffuse_direction_coefficient = 0;
        -:  109:
        -:  110:
        -:  111:
        -:  112:                    //                double specular_direction_coefficient = std::pow(std::abs(closest.ray.getDirection().reflection(face_normal) * V), 16);
        -:  113:
        -:  114://                double specular_direction_coefficient = std::pow(std::abs(R * V), 16);
    #####:  115:                    double specular_direction_coefficient = calculate_beckmann_distribution(R, V, material->glossiness);
    %%%%%:  115-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  116:                    diffuse_light += lightSource.intensity / raysPerPixel * distance_coefficient * diffuse_direction_coefficient;
    %%%%%:  116-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  116-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  116-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  116-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####:  117:                    specular_light += lightSource.intensity / raysPerPixel * distance_coefficient * specular_direction_coefficient;
    %%%%%:  117-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  117-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  117-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  117-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  117-block  4
        -:  118:                }
        -:  119:            }
        -:  120:        }
        -:  121:
    #####:  122:        if (material->glossiness > 0 && bounces_left > 0) {
    %%%%%:  122-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  122-block  1
branch  2 never executed
branch  3 never executed
    #####:  123:            specular_light += calculate_color({closest.position, R}, x, y, bounces_left - 1);
    %%%%%:  123-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  123-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  123-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  123-block  3
        -:  124:        }
    #####:  125:        const Intensity& specular_intensity = specular_light.commitSum();
    %%%%%:  125-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  126:        const Intensity& diffuse_intensity = diffuse_light.commitSum();
    %%%%%:  126-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  127:
    #####:  128:        return albedo * (specular_intensity * material->glossiness + diffuse_intensity * (1 - material->glossiness));
    %%%%%:  128-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  128-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  128-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  128-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  128-block  4
branch 12 never executed
branch 13 never executed
    $$$$$:  128-block  5
branch 14 never executed
branch 15 never executed
        -:  129:    }
        -:  130:
        -:  131:}
        -:  132:
function _ZN5Scene26orenNayarDiffuseReflectionERK9MyVector3S2_S2_d called 0 returned 0% blocks executed 0%
    #####:  133:double Scene::orenNayarDiffuseReflection (const MyVector3& face_normal, const MyVector3& vector_to_light, const MyVector3& vector_from_camera, double roughness) {
    #####:  134:    const auto& n = face_normal.normalize();
    %%%%%:  134-block  0
call    0 never executed
    #####:  135:    const auto& v = vector_to_light.normalize();
call    0 never executed
    #####:  136:    const auto& d = vector_from_camera.normalize();
call    0 never executed
        -:  137:    double sigma = roughness;
        -:  138:    double variance = std::pow(sigma, 2);
        -:  139:
    #####:  140:    double s = (n * v) * (d * n) - v * d;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  141:    double t = s > 0 ? std::max(n * v, -n * d) : 1;
branch  0 never executed
branch  1 never executed
    %%%%%:  141-block  0
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  141-block  1
        -:  142:
    #####:  143:    double A = 1 / M_PI * (1 - 0.5 * variance / (variance + 0.17) * variance / (variance + 0.13));
    #####:  144:    double B = 1 / M_PI * (0.45 * variance / (variance + 0.09));
        -:  145:
    #####:  146:    double d1 = d * n * (A + B * s / t);
    %%%%%:  146-block  0
call    0 never executed
        -:  147://    std::cout << d1 << std::endl;
    #####:  148:    return std::clamp(d1, 0.0, 1.0);
branch  0 never executed
branch  1 never executed
        -:  149:}
        -:  150:
        -:  151:
function _ZN5Scene27lambertianDiffuseReflectionERK9MyVector3S2_S2_ called 0 returned 0% blocks executed 0%
    #####:  152:double Scene::lambertianDiffuseReflection (const MyVector3& face_normal, const MyVector3& vector_to_light, const MyVector3& ray_direction) {
    #####:  153:    double dot1 = -ray_direction * face_normal;
    %%%%%:  153-block  0
call    0 never executed
call    1 never executed
    #####:  154:    double dot2 = vector_to_light * face_normal;
call    0 never executed
        -:  155:
    #####:  156:    if ((dot2 < 0) == (dot1 < 0)) {
branch  0 never executed
branch  1 never executed
    #####:  157:        return std::abs(face_normal * vector_to_light);
    %%%%%:  157-block  0
call    0 never executed
        -:  158:    } else {
        -:  159:        return 0;
        -:  160:    }
        -:  161:
        -:  162:}
        -:  163:
function _ZNK5Scene24get_closest_intersectionERK3Rayd called 40000 returned 100% blocks executed 42%
    40000:  164:std::optional<Intersection> Scene::get_closest_intersection (const Ray& ray, double max_distance) const {
    40000:  164-block  0
        -:  165:    std::vector<Intersection> intersections;
        -:  166:
    80000:  167:    for (const auto& object: objects) {
    80000:  167-block  0
branch  0 taken 40000 (fallthrough)
branch  1 taken 40000
    40000:  168:        const std::optional<Intersection> possibleIntersection = object->getIntersection(ray);
    40000:  168-block  0
call    0 returned 40000
branch  1 taken 40000 (fallthrough)
branch  2 taken 0 (throw)
   40000*:  169:        if (possibleIntersection && (max_distance == 0 || possibleIntersection->distance < max_distance)) {
    40000:  169-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 40000
    %%%%%:  169-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  169-block  2
branch  4 never executed
branch  5 never executed
    #####:  170:            intersections.push_back(possibleIntersection.value());
    %%%%%:  170-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  171:        }
        -:  172:    }
        -:  173:
    40000:  174:    if (intersections.empty()) { return std::nullopt; }
    40000:  174-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 40000
    40000:  174-block  1
        -:  175:    else {
        -:  176:        Intersection intersection = *std::min_element(intersections.begin(), intersections.end(), [] (const Intersection& a, const Intersection& b) {
    #####:  177:            return a.distance < b.distance;
    %%%%%:  177-block  0
branch  0 never executed
branch  1 never executed
    #####:  178:        });
    %%%%%:  178-block  0
        -:  179:
        -:  180:        return intersection;
        -:  181:    }
        -:  182://
        -:  183://
        -:  184://    double closest_distance = 1e308;
        -:  185://    Intersection* closest = nullptr;
        -:  186://
        -:  187://    for (const auto& object: objects) {
        -:  188://        std::optional<Intersection> possibleIntersection = object.getIntersection(ray);
        -:  189://        if (possibleIntersection && possibleIntersection->distance < closest_distance && (max_distance == 0 || possibleIntersection->distance < max_distance)) {
        -:  190:////            std::cout << (*possibleIntersection).sceneObject.getSurface() << std::endl;
        -:  191://            closest_distance = possibleIntersection->distance;
        -:  192://            closest = &(*possibleIntersection);
        -:  193://        }
        -:  194://    }
        -:  195://
        -:  196://    if (closest == nullptr) {
        -:  197://        return std::nullopt;
        -:  198://    } else {
        -:  199://        return {*closest};
        -:  200://    }
        -:  201:}
        -:  202:
function _ZN5Scene31calculate_beckmann_distributionERK9MyVector3S2_d called 0 returned 0% blocks executed 0%
    #####:  203:double Scene::calculate_beckmann_distribution (const MyVector3& R, const MyVector3& V, double glossiness) {
    #####:  204:    double roughness = 1 - glossiness;
    #####:  205:    if (roughness == 0) {
    %%%%%:  205-block  0
branch  0 never executed
branch  1 never executed
        -:  206:        return 0;
        -:  207:    }
        -:  208:
    #####:  209:    double cosine = R * V;
    %%%%%:  209-block  0
call    0 never executed
        -:  210:
        -:  211:
    #####:  212:    return std::exp(-(1 - std::pow(cosine, 2)) / (std::pow(cosine * roughness, 2))) / (PI * std::pow(roughness, 2) * std::pow(cosine, 4));
        -:  213://    / (std::numbers::pi_v<double> * std::pow(roughness, 2) * std::pow(cosine, 4));
        -:  214:
        -:  215:
        -:  216:}
        -:  217:
function _ZlsRSoRK5Scene called 0 returned 0% blocks executed 0%
    #####:  218:std::ostream& operator<< (std::ostream& os, const Scene& scene) {
    #####:  219:    os << "objects: {";
    %%%%%:  219-block  0
call    0 never executed
    #####:  220:    for (const auto& i : scene.objects ) {
    %%%%%:  220-block  0
branch  0 never executed
branch  1 never executed
    #####:  221:        os << i << ", ";
    %%%%%:  221-block  0
call    0 never executed
call    1 never executed
        -:  222:    }
    #####:  223:    os << "}";
    %%%%%:  223-block  0
call    0 never executed
        -:  224:
    #####:  225:    os << "lightSources: {";
call    0 never executed
    #####:  226:    for (const auto& i : scene.lightSources ) {
    %%%%%:  226-block  0
branch  0 never executed
branch  1 never executed
    #####:  227:        os << i << ", ";
    %%%%%:  227-block  0
call    0 never executed
call    1 never executed
        -:  228:    }
    #####:  229:    os << "}";
    %%%%%:  229-block  0
call    0 never executed
        -:  230:
    #####:  231:    os << " camera: " << scene.camera << " raysPerPixel: " << scene.raysPerPixel << " antialiasingScaler: " << scene.antialiasingScaler;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  232:    return os;
        -:  233:}
        -:  234:

        -:    0:Source:/home/kaappo/git/raytracercpp/src/core/geometry/Triangle.cpp
        -:    0:Graph:/home/kaappo/git/raytracercpp/cmake-build-debug-coverage/CMakeFiles/Main.dir/src/core/geometry/Triangle.cpp.gcno
        -:    0:Data:/home/kaappo/git/raytracercpp/cmake-build-debug-coverage/CMakeFiles/Main.dir/src/core/geometry/Triangle.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by kaappo on 11.9.2021.
        -:    3://
        -:    4:
        -:    5:#include "Triangle.h"
        -:    6:
function _ZN8TriangleC2ERK9MyVector3S2_S2_PK8MaterialS2_S2_S2_ called 2257 returned 100% blocks executed 100%
     2257:    7:Triangle::Triangle (const MyVector3& t1, const MyVector3& t2, const MyVector3& t3, const Material* material, const MyVector3& texture1, const MyVector3& texture2, const MyVector3& texture3)
     2257:    8:        : t1{t1}, t2{t2}, t3{t3}, plane{Plane::from_three_points(t1, t2, t3, material)}, tu{texture1}, tv{texture2}, tw{texture3} {}
     2257:    8-block  0
call    0 returned 2257
        -:    9:
        -:   10:
function _ZN8TriangleC2ERK9MyVector3S2_S2_PK8Material called 1 returned 100% blocks executed 100%
        1:   11:Triangle::Triangle (const MyVector3& t1, const MyVector3& t2, const MyVector3& t3, const Material* material) : Triangle{t1, t2, t3, material, {0, 0, 0}, {1, 0, 0}, {0, 1, 0}} {
        1:   11-block  0
call    0 returned 1
        -:   12:
        1:   13:}
        -:   14:
        -:   15://Triangle::Triangle (std::initializer_list<MyVector3> list) : Triangle(list.begin()[0], list.begin()[1], list.begin()[2]) {}
        -:   16:
        -:   17:
function _ZN8Triangle23getIntersectionDistanceERK3RayRP7SurfaceRPK8Material called 98560000 returned 100% blocks executed 75%
 98560000:   18:double Triangle::getIntersectionDistance (const Ray& ray, Surface*& hitSurface, const Material*& hitMaterial) {
        -:   19://    std::cout << "Raydestroyed: " << ray << std::endl;
 98560000:   20:    auto possible_intersection = plane.getIntersectionDistance(ray, hitSurface, hitMaterial);
 98560000:   20-block  0
call    0 returned 98560000
 98560000:   21:    if (possible_intersection == 0) {
branch  0 taken 98560000 (fallthrough)
branch  1 taken 0
        -:   22://        std::cout << "Early return" << std::endl;
        -:   23:        return 0.0;
        -:   24:    }
        -:   25:
 98560000:   26:    auto position = ray.apply(possible_intersection);
 98560000:   26-block  0
call    0 returned 98560000
 98560000:   27:    if (includes(position)) {
call    0 returned 98560000
branch  1 taken 0 (fallthrough)
branch  2 taken 98560000
    #####:   28:        hitSurface = this;
    #####:   29:        hitMaterial = getMaterial();
    %%%%%:   29-block  0
call    0 never executed
    #####:   30:        return possible_intersection;
        -:   31:    } else {
        -:   32:        return 0.0;
        -:   33:    }
        -:   34:}
        -:   35:
function _ZNK8Triangle8includesERK9MyVector3 called 98560000 returned 100% blocks executed 100%
 98560000:   36:bool Triangle::includes (const MyVector3& vector) const {
 98560000:   37:    return plane.includes(vector) && check_bounds(vector);
 98560000:   37-block  0
call    0 returned 98560000
branch  1 taken 98560000 (fallthrough)
branch  2 taken 0
 98560000:   37-block  1
call    3 returned 98560000
branch  4 taken 98560000 (fallthrough)
branch  5 taken 0
        -:   38:}
        -:   39:
function _ZNK8Triangle12check_boundsERK9MyVector3 called 98560000 returned 100% blocks executed 100%
 98560000:   40:bool Triangle::check_bounds (const MyVector3& vector) const {
        -:   41://        const MyVector3& v1 = maximum - t3;
        -:   42://    const MyVector3& v2 = minimum - t3;
        -:   43://    const MyVector3& v3 = maximum - minimum;
        -:   44://
        -:   45://    const MyVector3& b1 = v1.cross(v2);
        -:   46://    const MyVector3& b2 = v2.cross(v1);
        -:   47://    const MyVector3& b3 = v2.cross(v3);
        -:   48://
        -:   49://
        -:   50://    auto a = v1.cross(vector - t3);
        -:   51://    auto c = a.dot(b1);
        -:   52://    if (c < 0) return false;
        -:   53://
        -:   54://    a = v2.cross(vector - t3);
        -:   55://    c = a.dot(b2);
        -:   56://    if (c < 0) return false;
        -:   57://
        -:   58://    a = v3.cross(vector - minimum);
        -:   59://    c = a.dot(b3);
        -:   60://    if (c < 0) return false;
        -:   61://
        -:   62://    return true;
        -:   63:
        -:   64:
        -:   65:    const MyVector3& P = vector;
        -:   66:
        -:   67:// Compute vectors
 98560000:   68:    const MyVector3& v0 = t3 - t1;
 98560000:   68-block  0
call    0 returned 98560000
 98560000:   69:    const MyVector3& v1 = t2 - t1;
call    0 returned 98560000
 98560000:   70:    const MyVector3& v2 = P - t1;
call    0 returned 98560000
        -:   71:
        -:   72:// Compute dot products
 98560000:   73:    double dot00 = v0.squared();
call    0 returned 98560000
 98560000:   74:    double dot01 = v0.dot(v1);
call    0 returned 98560000
 98560000:   75:    double dot02 = v0.dot(v2);
call    0 returned 98560000
 98560000:   76:    double dot11 = v1.squared();
call    0 returned 98560000
 98560000:   77:    double dot12 = v1.dot(v2);
call    0 returned 98560000
        -:   78:
        -:   79:// Compute barycentric coordinates
 98560000:   80:    double invDenom = 1.0 / (dot00 * dot11 - dot01 * dot01);
 98560000:   81:    double u = (dot11 * dot02 - dot01 * dot12) * invDenom;
 98560000:   82:    double v = (dot00 * dot12 - dot01 * dot02) * invDenom;
        -:   83:
        -:   84:// Check if point is in triangle
 98560000:   85:    return (u >= 0) && (v >= 0) && (u + v < 1);
branch  0 taken 49040665 (fallthrough)
branch  1 taken 49519335
 49040665:   85-block  0
branch  2 taken 16195967 (fallthrough)
branch  3 taken 32844698
 16195967:   85-block  1
branch  4 taken 16195967 (fallthrough)
branch  5 taken 0
        -:   86:
        -:   87:
        -:   88:}
        -:   89:
function _ZNK8Triangle11getNormalAtERK9MyVector3 called 0 returned 0% blocks executed 0%
    #####:   90:MyVector3 Triangle::getNormalAt (const MyVector3& position) const {
    #####:   91:    return plane.getNormal();
    %%%%%:   91-block  0
call    0 never executed
        -:   92:}
        -:   93:
function _ZNK8Triangle7getUVAtERK9MyVector3 called 0 returned 0% blocks executed 0%
    #####:   94:MyVector3 Triangle::getUVAt (const MyVector3& position) const {
        -:   95://    const MyVector3& tangent = t3 - minimum;
        -:   96://    const MyVector3& normal = getNormalAt(position);
        -:   97://
        -:   98://    const MyVector3& width = tangent;
        -:   99://    const MyVector3& height = maximum - minimum - width * ((width * maximum - width * minimum) / width.squared());
        -:  100://
        -:  101://    const MyVector3& local_position = position - minimum;
        -:  102://    const MyVector3& uv = local_position.inTermsOfComponents(width, height, normal.normalize());
        -:  103://    return uv;
        -:  104:
        -:  105:
        -:  106:    const MyVector3& P = position;
        -:  107:
        -:  108:// Compute vectors
    #####:  109:    const MyVector3& v0 = t3 - t1;
    %%%%%:  109-block  0
call    0 never executed
    #####:  110:    const MyVector3& v1 = t2 - t1;
call    0 never executed
    #####:  111:    const MyVector3& v2 = P - t1;
call    0 never executed
        -:  112:
        -:  113:// Compute dot products
    #####:  114:    double dot00 = v0.squared();
call    0 never executed
    #####:  115:    double dot01 = v0.dot(v1);
call    0 never executed
    #####:  116:    double dot02 = v0.dot(v2);
call    0 never executed
    #####:  117:    double dot11 = v1.squared();
call    0 never executed
    #####:  118:    double dot12 = v1.dot(v2);
call    0 never executed
        -:  119:
        -:  120:// Compute barycentric coordinates
    #####:  121:    double invDenom = 1.0 / (dot00 * dot11 - dot01 * dot01);
    #####:  122:    double u = (dot11 * dot02 - dot01 * dot12) * invDenom;
    #####:  123:    double v = (dot00 * dot12 - dot01 * dot02) * invDenom;
        -:  124:
    #####:  125:    u = u - std::floor(u);
    #####:  126:    v = v - std::floor(v);
    #####:  127:    double w = 1 - u - v;
        -:  128:
        -:  129://    std::cout << tu << tv  << tw << std::endl;
        -:  130:
        -:  131:
    #####:  132:    return tu * u + tv * v + tw * w;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  133:
        -:  134:}
        -:  135:
function _ZlsRSoRK8Triangle called 0 returned 0% blocks executed 0%
    #####:  136:std::ostream& operator<< (std::ostream& os, const Triangle& triangle) {
    %%%%%:  136-block  0
call    0 never executed
    #####:  137:    os << "Triangle{" << triangle.t1 << ", " << triangle.t2 << ", " << triangle.t3 << "}";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  138:    return os;
        -:  139:}
        -:  140:
function _ZNK8Triangle14getBoundingBoxEv called 334990 returned 100% blocks executed 100%
   334990:  141:AABB Triangle::getBoundingBox () const {
   499803:  142:    double smallestX = std::min(t1.getI(), std::min(t2.getI(), t3.getI()));
   334990:  142-block  0
call    0 returned 334990
call    1 returned 334990
branch  2 taken 164813 (fallthrough)
branch  3 taken 170177
   334990:  142-block  1
call    4 returned 334990
branch  5 taken 220858 (fallthrough)
branch  6 taken 114132
   500120:  143:    double greatestX = std::max(t1.getI(), std::max(t2.getI(), t3.getI()));
   334990:  143-block  0
call    0 returned 334990
call    1 returned 334990
branch  2 taken 165130 (fallthrough)
branch  3 taken 169860
   334990:  143-block  1
call    4 returned 334990
branch  5 taken 224735 (fallthrough)
branch  6 taken 110255
        -:  144:
   499397:  145:    double smallestY = std::min(t1.getJ(), std::min(t2.getJ(), t3.getJ()));
   334990:  145-block  0
call    0 returned 334990
call    1 returned 334990
branch  2 taken 164407 (fallthrough)
branch  3 taken 170583
   334990:  145-block  1
call    4 returned 334990
branch  5 taken 218639 (fallthrough)
branch  6 taken 116351
   498779:  146:    double greatestY = std::max(t1.getJ(), std::max(t2.getJ(), t3.getJ()));
   334990:  146-block  0
call    0 returned 334990
call    1 returned 334990
branch  2 taken 163789 (fallthrough)
branch  3 taken 171201
   334990:  146-block  1
call    4 returned 334990
branch  5 taken 225231 (fallthrough)
branch  6 taken 109759
        -:  147:
   503949:  148:    double smallestZ = std::min(t1.getK(), std::min(t2.getK(), t3.getK()));
   334990:  148-block  0
call    0 returned 334990
call    1 returned 334990
branch  2 taken 168959 (fallthrough)
branch  3 taken 166031
   334990:  148-block  1
call    4 returned 334990
branch  5 taken 204359 (fallthrough)
branch  6 taken 130631
   708652:  149:    double greatestZ = std::max(t1.getK(), std::max(t2.getK(), t3.getK()));
   334990:  149-block  0
call    0 returned 334990
call    1 returned 334990
branch  2 taken 166031 (fallthrough)
branch  3 taken 168959
   334990:  149-block  1
call    4 returned 334990
branch  5 taken 207631 (fallthrough)
branch  6 taken 127359
   334990:  149-block  2
call    7 returned 334990
        -:  150:
   334990:  151:    return AABB{{smallestX, smallestY, smallestZ}, {greatestX, greatestY, greatestZ}};
   334990:  151-block  0
call    0 returned 334990
        -:  152:}
        -:  153:
function _ZNK8Triangle11getMaterialEv called 2257 returned 100% blocks executed 100%
     2257:  154:const Material* Triangle::getMaterial () const {
     2257:  155:    return plane.getMaterial();
     2257:  155-block  0
call    0 returned 2257
        -:  156:}
        -:  157:
        -:  158:

        -:    0:Source:/home/kaappo/git/raytracercpp/src/core/engine/Image.cpp
        -:    0:Graph:/home/kaappo/git/raytracercpp/cmake-build-debug-coverage/CMakeFiles/Main.dir/src/core/engine/Image.cpp.gcno
        -:    0:Data:/home/kaappo/git/raytracercpp/cmake-build-debug-coverage/CMakeFiles/Main.dir/src/core/engine/Image.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by kaappo on 21.9.2021.
        -:    3://
        -:    4:
        -:    5:
        -:    6:#include <stdexcept>
        -:    7:#include <iostream>
        -:    8:#include "Image.h"
        -:    9:
        -:   10:#define STB_IMAGE_IMPLEMENTATION
        -:   11:#define STBI_NO_FAILURE_STRINGS
        -:   12:
        -:   13:#include "../../../lib/stb/std_image.h"
        -:   14:
function _ZN5ImageC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 70%
        1:   15:Image::Image (const std::string& path) : width{0}, height{0}, bytes_per_pixel{0} {
        1:   15-block  0
call    0 returned 1
        1:   16:    int amountOfChannels = path.ends_with("jpg") ? 3 : 4;
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:   17:
        1:   18:    data = stbi_load(path.c_str(), &width, &height, &bytes_per_pixel, amountOfChannels);
        1:   18-block  0
call    0 returned 1
call    1 returned 1
        -:   19:    std::cout << "Initializing" << std::endl;
        1:   20:    if (width == 0 || height == 0) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   20-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
        -:   21:        std::cerr << path << std::endl;
    #####:   22:        throw std::runtime_error("Error reading the image!");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:   22-block  0
call    4 never executed
    $$$$$:   22-block  1
call    5 never executed
        -:   23:    }
        -:   24:
        2:   25:    std::cout << width << ", " << height << std::endl;
        1:   25-block  0
call    0 returned 1
call    1 returned 1
        1:   26:}
        -:   27:
       1*:   28:Image::~Image () {
        -:   29:    std::cout << "Freed data!" << std::endl;
        1:   30:    stbi_image_free(data);
       1*:   31:}
------------------
_ZN5ImageD0Ev:
function _ZN5ImageD0Ev called 0 returned 0% blocks executed 0%
    #####:   28:Image::~Image () {
        -:   29:    std::cout << "Freed data!" << std::endl;
        -:   30:    stbi_image_free(data);
    #####:   31:}
    %%%%%:   31-block  0
call    0 never executed
call    1 never executed
------------------
_ZN5ImageD2Ev:
function _ZN5ImageD2Ev called 1 returned 100% blocks executed 100%
        1:   28:Image::~Image () {
        1:   28-block  0
call    0 returned 1
        -:   29:    std::cout << "Freed data!" << std::endl;
        1:   30:    stbi_image_free(data);
        1:   31:}
------------------
        -:   32:
function _ZNK5Image12get_pixel_atEii called 0 returned 0% blocks executed 0%
    #####:   33:Intensity Image::get_pixel_at (int x, int y) const {
    #####:   34:    int index = bytes_per_pixel * (width * y + x);
        -:   35://    std::cout << data[0] << std::endl;
        -:   36://    return {std::sqrt(data[index] / 256.0), std::sqrt(data[index + 1] / 256.0), std::sqrt(data[index + 2] / 256.0)};
    #####:   37:    return {data[index] / 256.0, data[index + 1] / 256.0, data[index + 2] / 256.0};
    %%%%%:   37-block  0
call    0 never executed
        -:   38://    return {1, 1, 0};
        -:   39://    return {std::sqrt(data[index] / 256.0), std::sqrt(data[index + 1] / 256.0), std::sqrt(data[index + 2] / 256.0)};
        -:   40:}
        -:   41:
function _ZNK5Image8getWidthEv called 0 returned 0% blocks executed 0%
    #####:   42:int Image::getWidth () const {
    #####:   43:    return width;
        -:   44:}
        -:   45:
function _ZNK5Image9getHeightEv called 0 returned 0% blocks executed 0%
    #####:   46:int Image::getHeight () const {
    #####:   47:    return height;
        -:   48:}
        -:   49:
        -:   50:

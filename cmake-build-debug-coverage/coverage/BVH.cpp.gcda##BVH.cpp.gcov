        -:    0:Source:/home/kaappo/git/raytracercpp/src/core/geometry/BVH.cpp
        -:    0:Graph:/home/kaappo/git/raytracercpp/cmake-build-debug-coverage/CMakeFiles/Main.dir/src/core/geometry/BVH.cpp.gcno
        -:    0:Data:/home/kaappo/git/raytracercpp/cmake-build-debug-coverage/CMakeFiles/Main.dir/src/core/geometry/BVH.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by kaappo on 28.1.2022.
        -:    3://
        -:    4:
        -:    5:#include "BVH.h"
        -:    6:#include "../common/mytypes.h"
        -:    7:
        -:    8:int prunes = 0;
        -:    9:
function _ZN7BVHNode23getIntersectionDistanceERK3RayRP7SurfaceRPK8Material called 98520000 returned 100% blocks executed 50%
 98520000:   10:double BVHNode::getIntersectionDistance (const Ray& ray, Surface*& hitSurface, const Material*& hitMaterial) {
 98520000:   11:    if (!box.intersects(ray)) {
 98520000:   11-block  0
call    0 returned 98520000
branch  1 taken 0 (fallthrough)
branch  2 taken 98520000
    #####:   12:        prunes++;
        -:   13://        std::cout << "Pruned!" << prunes << std::endl;
    #####:   14:        return 0;
    %%%%%:   14-block  0
        -:   15:    }
        -:   16:
        -:   17:
 98520000:   18:    Surface* leftTempHitSurface = nullptr;
 98520000:   19:    const Material* leftTempHitMaterial = nullptr;
 98520000:   19-block  0
call    0 returned 98520000
 98520000:   20:    double leftDistance = left->getIntersectionDistance(ray, leftTempHitSurface, leftTempHitMaterial);
 98520000:   20-block  0
call    0 returned 98520000
        -:   21:
 98520000:   22:    Surface* rightTempHitSurface = nullptr;
 98520000:   23:    const Material* rightTempHitMaterial = nullptr;
call    0 returned 98520000
 98520000:   24:    double rightDistance = right->getIntersectionDistance(ray, rightTempHitSurface, rightTempHitMaterial);
call    0 returned 98520000
        -:   25://    std::cout << leftDistance << std::endl;
        -:   26:
        -:   27:
 98520000:   28:    if (std::abs(rightDistance) > PRECISION_LIMIT) {
branch  0 taken 0 (fallthrough)
branch  1 taken 98520000
    #####:   29:        if (std::abs(leftDistance) > PRECISION_LIMIT) {
    %%%%%:   29-block  0
branch  0 never executed
branch  1 never executed
    #####:   30:            if (rightDistance <= leftDistance) {
    %%%%%:   30-block  0
branch  0 never executed
branch  1 never executed
    #####:   31:                hitSurface = rightTempHitSurface;
    #####:   32:                hitMaterial = rightTempHitMaterial;
    #####:   33:                return rightDistance;
    %%%%%:   33-block  0
        -:   34:            } else {
    #####:   35:                hitSurface = leftTempHitSurface;
    #####:   36:                hitMaterial = leftTempHitMaterial;
    #####:   37:                return leftDistance;
    %%%%%:   37-block  0
        -:   38:            }
        -:   39:        } else {
    #####:   40:            hitSurface = rightTempHitSurface;
    #####:   41:            hitMaterial = rightTempHitMaterial;
    #####:   42:            return rightDistance;
    %%%%%:   42-block  0
        -:   43:        }
 98520000:   44:    } else if (std::abs(leftDistance) > PRECISION_LIMIT) {
 98520000:   44-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 98520000
    #####:   45:        hitSurface = leftTempHitSurface;
    #####:   46:        hitMaterial = leftTempHitMaterial;
    #####:   47:        return leftDistance;
    %%%%%:   47-block  0
        -:   48:    } else {
        -:   49:        return 0;
        -:   50:    }
        -:   51:
        -:   52:
        -:   53://    if (std::abs(rightDistance) > PRECISION_LIMIT && rightDistance <= leftDistance) {
        -:   54://        hitSurface = rightTempHitSurface;
        -:   55://        hitMaterial = rightTempHitMaterial;
        -:   56://        return rightDistance;
        -:   57://    } else {
        -:   58://        std::cout << rightDistance << ", " << leftDistance << std::endl;
        -:   59://
        -:   60://    }
        -:   61://
        -:   62://    if (std::abs(leftDistance) > PRECISION_LIMIT && leftDistance <= rightDistance) {
        -:   63://        hitSurface = leftTempHitSurface;
        -:   64://        hitMaterial = leftTempHitMaterial;
        -:   65://        return leftDistance;
        -:   66://    }
        -:   67:
        -:   68://    std::cout << "Falling through!" << rightDistance << ", " << leftDistance << ", " << std::endl;
        -:   69:    return 0;
        -:   70://    if (leftDistance) return leftDistance;
        -:   71://    else if (rightDistance) return rightDistance;
        -:   72://    else return 0;
        -:   73:}
        -:   74:
function _ZlsRSoRK7BVHNode called 5 returned 100% blocks executed 62%
        5:   75:std::ostream& operator<< (std::ostream& os, const BVHNode& node) {
        -:   76:
       10:   77:    std::stringstream tab;
        5:   77-block  0
call    0 returned 5
        5:   77-block  1
call    1 returned 5
       11:   78:    for (int i = 0 ; i < node.depth ; ++i) tab << "\t";
       11:   78-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 5
        6:   78-block  1
call    2 returned 6
branch  3 taken 6 (fallthrough)
branch  4 taken 0 (throw)
        6:   78-block  2
        5:   79:    if (node.left == node.right) {
        5:   79-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        1:   80:        os << tab.str() << node.left->getBoundingBox();
        1:   80-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   80-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   80-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 1
    $$$$$:   80-block  3
branch  8 never executed
branch  9 never executed
        1:   81:        return os;
        1:   81-block  0
        -:   82:    }
        -:   83:
        8:   84:    os << tab.str() << "BHV (" << node.box << ") {" << std::endl;
        4:   84-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:   84-block  1
branch  3 taken 4 (fallthrough)
branch  4 taken 0
        4:   85:    if (BVHNode* lleft = dynamic_cast<BVHNode*>(node.left.get())) {
        4:   85-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:   85-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 2
        2:   86:        os << *lleft << std::endl;
        2:   86-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -:   87:    } else {
        4:   88:        os << tab.str() << "\t" << node.left->getBoundingBox() << std::endl;
        2:   88-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   88-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2:   88-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 2
        2:   88-block  3
    $$$$$:   88-block  4
branch  8 never executed
branch  9 never executed
        -:   89:    }
        -:   90:
        4:   91:    if (BVHNode* rright = dynamic_cast<BVHNode*>(node.right.get())) {
        4:   91-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:   91-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 2
        2:   92:        os << *rright << std::endl;
        2:   92-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -:   93:    } else {
        4:   94:        os << tab.str() << "\t" << node.right->getBoundingBox() << std::endl;
        2:   94-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   94-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2:   94-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 2
        2:   94-block  3
    $$$$$:   94-block  4
branch  8 never executed
branch  9 never executed
        -:   95:    }
        -:   96:
        4:   97:    os << tab.str() << "}";
        4:   97-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:   97-block  1
call    3 never executed
        4:   98:    return os;
        4:   98-block  0
        -:   99:}
        -:  100:
function _Z10boxCompareRKSt10shared_ptrI7SurfaceES3_i called 170069 returned 100% blocks executed 100%
   170069:  101:bool boxCompare (const std::shared_ptr<Surface>& a, const std::shared_ptr<Surface>& b, int axis) {
   170069:  101-block  0
call    0 returned 170069
        -:  102:
        -:  103:
   170069:  104:    return a->getBoundingBox().getMinimum()[axis] < b->getBoundingBox().getMinimum()[axis];
   170069:  104-block  0
call    0 returned 170069
call    1 returned 170069
call    2 returned 170069
call    3 returned 170069
call    4 returned 170069
call    5 returned 170069
        -:  105://    if (!a->bounding_box(0,0, box_a) || !b->bounding_box(0,0, box_b))
        -:  106://        std::cerr << "No bounding box in bvh_node constructor.\n";
        -:  107://
        -:  108://    return box_a.min().e[depth] < box_b.min().e[depth];
        -:  109:}
        -:  110:
        -:  111:
function _Z11boxCompareXRKSt10shared_ptrI7SurfaceES3_ called 68585 returned 100% blocks executed 100%
    68585:  112:bool boxCompareX (const std::shared_ptr<Surface>& a, const std::shared_ptr<Surface>& b) {
    68585:  113:    return boxCompare(a, b, 0);
    68585:  113-block  0
call    0 returned 68585
        -:  114:}
        -:  115:
function _Z11boxCompareYRKSt10shared_ptrI7SurfaceES3_ called 59087 returned 100% blocks executed 100%
    59087:  116:bool boxCompareY (const std::shared_ptr<Surface>& a, const std::shared_ptr<Surface>& b) {
    59087:  117:    return boxCompare(a, b, 1);
    59087:  117-block  0
call    0 returned 59087
        -:  118:}
        -:  119:
function _Z11boxCompareZRKSt10shared_ptrI7SurfaceES3_ called 42397 returned 100% blocks executed 100%
    42397:  120:bool boxCompareZ (const std::shared_ptr<Surface>& a, const std::shared_ptr<Surface>& b) {
    42397:  121:    return boxCompare(a, b, 2);
    42397:  121-block  0
call    0 returned 42397
        -:  122:}
        -:  123:
function _ZN7BVHNodeC2ESt6vectorISt10shared_ptrI7SurfaceESaIS3_EE called 3 returned 100% blocks executed 100%
        3:  124:BVHNode::BVHNode (std::vector<std::shared_ptr<Surface>> surfaces) : BVHNode{surfaces, 0, 0, surfaces.size()} {
        3:  124-block  0
call    0 returned 3
        3:  125:}
        -:  126:
function _ZN7BVHNodeC2ERSt6vectorISt10shared_ptrI7SurfaceESaIS3_EEimm called 2675 returned 100% blocks executed 69%
     2675:  127:BVHNode::BVHNode (std::vector<std::shared_ptr<Surface>>& src_surfaces, int axis, size_t start, size_t end) : box{true}, left{}, right{}, depth{axis} {
     2675:  127-block  0
branch  0 taken 2016 (fallthrough)
branch  1 taken 659
     2675:  128:    auto comparator = (axis % 3 == 0) ?
     2675:  128-block  0
branch  0 taken 2016 (fallthrough)
branch  1 taken 659
     2016:  129:                      boxCompareX : (axis % 3 == 1) ?
     2016:  129-block  0
branch  0 taken 746 (fallthrough)
branch  1 taken 1270
        -:  130:                                    boxCompareY : boxCompareZ;
        -:  131:
     5350:  132:    std::vector<std::shared_ptr<Surface>> surfaces = src_surfaces;
     2675:  132-block  0
call    0 returned 2675
branch  1 taken 2675 (fallthrough)
branch  2 taken 0 (throw)
     2675:  132-block  1
call    3 returned 2675
        -:  133:
        -:  134:
     2675:  135:    size_t objectSpan = end - start;
     2675:  136:    if (objectSpan == 1) {
     2675:  136-block  0
branch  0 taken 249 (fallthrough)
branch  1 taken 2426
        -:  137:        left = surfaces[start];
      249:  138:        right = surfaces[start];
call    0 returned 249
     2426:  139:    } else if (objectSpan == 2) {
     2426:  139-block  0
branch  0 taken 1090 (fallthrough)
branch  1 taken 1336
     1090:  140:        if (comparator(surfaces[start], surfaces[start + 1])) {
     1090:  140-block  0
call    0 returned 1090
branch  1 taken 1090 (fallthrough)
branch  2 taken 0 (throw)
     1090:  140-block  1
branch  3 taken 399 (fallthrough)
branch  4 taken 691
      399:  141:            left = surfaces[start];
      399:  141-block  0
call    0 returned 399
      399:  142:            right = surfaces[start + 1];
call    0 returned 399
        -:  143:        } else {
      691:  144:            left = surfaces[start + 1];
      691:  144-block  0
call    0 returned 691
      691:  145:            right = surfaces[start];
call    0 returned 691
        -:  146:        }
        -:  147:    } else {
     1336:  148:        std::sort(surfaces.begin() + start, surfaces.begin() + end, comparator);
     1336:  149:        size_t mid = start + objectSpan / 2;
        -:  150:
     1336:  151:        left = make_shared<BVHNode>(surfaces, axis + 1, start, mid);
     1336:  151-block  0
call    0 returned 1336
branch  1 taken 1336 (fallthrough)
branch  2 taken 0 (throw)
     2672:  152:        right = make_shared<BVHNode>(surfaces, axis + 1, mid, end);
     1336:  152-block  0
call    0 returned 1336
branch  1 taken 1336 (fallthrough)
branch  2 taken 0 (throw)
     1336:  152-block  1
    $$$$$:  152-block  2
call    3 never executed
        -:  153:    }
        -:  154:
     2675:  155:    AABB leftBB = left->getBoundingBox();
     2675:  155-block  0
call    0 returned 2675
branch  1 taken 2675 (fallthrough)
branch  2 taken 0 (throw)
     2675:  156:    AABB rightBB = right->getBoundingBox();
     2675:  156-block  0
call    0 returned 2675
branch  1 taken 2675 (fallthrough)
branch  2 taken 0 (throw)
        -:  157:
     2675:  158:    if (leftBB == AABBs::INVALID || rightBB == AABBs::INVALID) {
     2675:  158-block  0
call    0 returned 2675
branch  1 taken 2675 (fallthrough)
branch  2 taken 0 (throw)
     2675:  158-block  1
branch  3 taken 2675 (fallthrough)
branch  4 taken 0
     2675:  158-block  2
call    5 returned 2675
branch  6 taken 2675 (fallthrough)
branch  7 taken 0 (throw)
     2675:  158-block  3
branch  8 taken 0 (fallthrough)
branch  9 taken 2675
    #####:  159:        throw std::runtime_error("All objects must have a valid bounding box");
    %%%%%:  159-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  159-block  1
call    4 never executed
    $$$$$:  159-block  2
call    5 never executed
        -:  160:    }
        -:  161:
     2675:  162:    box = leftBB.expand(rightBB);
     2675:  162-block  0
call    0 returned 2675
branch  1 taken 2675 (fallthrough)
branch  2 taken 0 (throw)
     2675:  163:}
        -:  164:
function _ZNK7BVHNode14getBoundingBoxEv called 2672 returned 100% blocks executed 100%
     2672:  165:AABB BVHNode::getBoundingBox () const {
     2672:  166:    return box;
        -:  167:}
        -:  168:
function _ZNK7BVHNode11getNormalAtERK9MyVector3 called 0 returned 0% blocks executed 0%
    #####:  169:MyVector3 BVHNode::getNormalAt (const MyVector3& position) const {
    #####:  170:    throw std::runtime_error("getNormalAt not implemented for BVHNode!");
    %%%%%:  170-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  170-block  1
call    4 never executed
    $$$$$:  170-block  2
call    5 never executed
        -:  171:}
        -:  172:
function _ZNK7BVHNode7getUVAtERK9MyVector3 called 0 returned 0% blocks executed 0%
    #####:  173:MyVector3 BVHNode::getUVAt (const MyVector3& position) const {
    #####:  174:    throw std::runtime_error("getUVAt not implemented for BVHNode!");
    %%%%%:  174-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  174-block  1
call    4 never executed
    $$$$$:  174-block  2
call    5 never executed
        -:  175:}
        -:  176:
function _ZNK7BVHNode11getMaterialEv called 0 returned 0% blocks executed 0%
    #####:  177:const Material* BVHNode::getMaterial () const {
    #####:  178:    throw std::runtime_error("getMaterial not implemented for BVHNode!");
    %%%%%:  178-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  178-block  1
call    4 never executed
    $$$$$:  178-block  2
call    5 never executed
        -:  179:}
        -:  180:
        -:  181:

        -:    0:Source:/home/kaappo/git/raytracercpp/src/core/geometry/Objects.cpp
        -:    0:Graph:/home/kaappo/git/raytracercpp/cmake-build-debug-coverage/CMakeFiles/Main.dir/src/core/geometry/Objects.cpp.gcno
        -:    0:Data:/home/kaappo/git/raytracercpp/cmake-build-debug-coverage/CMakeFiles/Main.dir/src/core/geometry/Objects.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by kaappo on 28.1.2022.
        -:    3://
        -:    4:
        -:    5:#include "Objects.h"
        -:    6:#include "../common/mytypes.h"
        -:    7:
function _ZNK7Objects11getNormalAtERK9MyVector3 called 0 returned 0% blocks executed 0%
    #####:    8:MyVector3 Objects::getNormalAt (const MyVector3& position) const {
    #####:    9:    throw std::runtime_error("Normal generation not implemented!");
    %%%%%:    9-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:    9-block  1
call    4 never executed
    $$$$$:    9-block  2
call    5 never executed
        -:   10:}
        -:   11:
function _ZNK7Objects7getUVAtERK9MyVector3 called 0 returned 0% blocks executed 0%
    #####:   12:MyVector3 Objects::getUVAt (const MyVector3& position) const {
    #####:   13:    throw std::runtime_error("UV mapping not implemented!");
    %%%%%:   13-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:   13-block  1
call    4 never executed
    $$$$$:   13-block  2
call    5 never executed
        -:   14:}
        -:   15:
function _ZNK7Objects11getMaterialEv called 0 returned 0% blocks executed 0%
    #####:   16:const Material* Objects::getMaterial () const {
    %%%%%:   16-block  0
call    0 never executed
    #####:   17:    return surfaces[0]->getMaterial();
    %%%%%:   17-block  0
call    0 never executed
        -:   18:}
        -:   19:
function _ZN7ObjectsC2ERKSt6vectorISt10shared_ptrI7SurfaceESaIS3_EE called 2 returned 100% blocks executed 100%
        2:   20:Objects::Objects (const std::vector<std::shared_ptr<Surface>>& surfaces) : surfaces{surfaces} {
        2:   20-block  0
call    0 returned 2
        -:   21:
        2:   22:}
        -:   23:
function _ZN7Objects23getIntersectionDistanceERK3RayRP7SurfaceRPK8Material called 0 returned 0% blocks executed 0%
    #####:   24:double Objects::getIntersectionDistance (const Ray& ray, Surface*& hitSurface, const Material*& hitMaterial) {
    #####:   25:    Surface* tempHitSurface = nullptr;
    #####:   26:    const Material* tempHitMaterial = nullptr;
    %%%%%:   26-block  0
        -:   27:
        -:   28:    double closest_hit = 1e9;
        -:   29:
    #####:   30:    for (const auto& surface : surfaces) {
    %%%%%:   30-block  0
branch  0 never executed
branch  1 never executed
    #####:   31:        double candidate = surface->getIntersectionDistance(ray, tempHitSurface, tempHitMaterial);
    %%%%%:   31-block  0
call    0 never executed
        -:   32:
    #####:   33:        if (std::abs(candidate) > PRECISION_LIMIT && candidate < closest_hit) {
branch  0 never executed
branch  1 never executed
    %%%%%:   33-block  0
branch  2 never executed
branch  3 never executed
        -:   34:            closest_hit = candidate;
    #####:   35:            hitSurface = tempHitSurface;
    #####:   36:            hitMaterial = tempHitMaterial;
    %%%%%:   36-block  0
        -:   37://            if (hitSurface == nullptr) {
        -:   38://                std::cout << "Problem!" << std::endl;
        -:   39://            } else {
        -:   40://                std::cout << *hitSurface << std::endl;
        -:   41://
        -:   42://            }
        -:   43:        }
        -:   44:    }
        -:   45:
        -:   46:
    #####:   47:    return closest_hit == 1e9 ? 0 : closest_hit;
    %%%%%:   47-block  0
branch  0 never executed
branch  1 never executed
        -:   48:}
        -:   49:
function _ZNK7Objects14getBoundingBoxEv called 0 returned 0% blocks executed 0%
    #####:   50:AABB Objects::getBoundingBox () const {
    %%%%%:   50-block  0
branch  0 never executed
branch  1 never executed
    #####:   51:    if (surfaces.empty()) return AABBs::INVALID;
    %%%%%:   51-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   51-block  1
        -:   52:
    #####:   53:    AABB result = AABBs::INVALID;
    %%%%%:   53-block  0
        -:   54:    bool firstBox = true;
        -:   55://
    #####:   56:    for (const auto& surface : surfaces) {
    %%%%%:   56-block  0
branch  0 never executed
branch  1 never executed
    #####:   57:        const AABB& temp = surface->getBoundingBox();
    %%%%%:   57-block  0
call    0 never executed
    #####:   58:        if (temp == AABBs::INVALID) return AABBs::INVALID;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   58-block  0
    #####:   59:        if (firstBox) result = temp;
    %%%%%:   59-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   59-block  1
        -:   60:        firstBox = false;
        -:   61:
    #####:   62:        result = result.expand(temp);
    %%%%%:   62-block  0
call    0 never executed
        -:   63:    }
        -:   64:
    #####:   65:    return result;
    %%%%%:   65-block  0
        -:   66:}
        -:   67:
